<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="nant-schema" name="Rubicon.Commons">

  <target name="debug" depends="setdebug, all" />
  <target name="release" depends="setrelease, all" />
  <target name="resources" depends="setresources, all" />
  <target name="doc" depends="doc-public, doc-internal" />
  <target name="deploy" depends="cleantemp, zip, sourcezip, getcurrent" />

  <include buildfile="build/properties.include.xml" verbose="true" />
  <include buildfile="build/Commons.include.xml" verbose="true" />
  <include buildfile="build/Commons.Doc.net-1.1.include.xml" verbose="true" if="${nant.settings.currentframework == 'net-1.1'}" />
  <include buildfile="build/Commons.Doc.include.xml" verbose="true" unless="${nant.settings.currentframework == 'net-1.1'}" />

  <property name="dir.development" value="\development" overwrite="false"/>
  <property name="global.dir" value="${dir.development}\global"/>
  <property name="solution.basedir" value="${project::get-base-directory()}" />
  <property name ="solution.projects" 
      value="Core, Core.Test, Data, Development, ObjectBinding, prereq, Web/Core, Web/Legacy, Web/UnitTests, Web/ExecutionEngine/Test"/>
  <property name="prereq.assemblies" value="${solution.basedir}\prereq\assemblies" />
  <property name="project.basedir" value="${solution.basedir}/${project.dir}" dynamic="true" />
  <property name="build.outputdir" value="${build.basedir}/${nant.settings.currentframework}/bin/${project.config}" dynamic="true" />
  <property name="build.temp.basedir" value="${build.basedir}/temp" dynamic="true" />
  <property name="build.temp.outputdir" value="${build.temp.basedir}/${nant.settings.currentframework}/${project.config}" dynamic="true" />
  <property name="build.test.outputdir" value="${build.temp.basedir}/${nant.settings.currentframework}/tests/${project.config}" dynamic="true" />
  <property name="build.keyfile" value="${global.dir}\rubicon.snk" />
  <property name="doc.targetdir" value="${build.basedir}/${nant.settings.currentframework}/doc" dynamic="true" />

  <property name="sql.dir" value="C:\Program Files\Microsoft SQL Server\90\Tools\Binn" overwrite="false" />
  <property name="sql.instance" value="localhost" overwrite="false" />

  <property name="doc.sdkdocversion" value="SDK_v1_1" if="${nant.settings.currentframework == 'net-1.1'}" />
  <property name="doc.sdkdocversion" value="SDK_v2_0" if="${nant.settings.currentframework == 'net-2.0'}" />

  <target name="local" description="make local build into directory build/current">
    <property name="build.local" value="true" />
  </target>

  <target name="init-build-version">
    <buildversion versionfile="${solution.basedir}/build/buildversion.xml" increment="false" />
    <echo message="new version is ${build.version.noconfig}"/>

    <property name="build.basedir" value="${solution.basedir}/build/${build.version.noconfig}" unless="${property::exists('build.local')}" />
    <property name="build.basedir" value="${solution.basedir}/build/Current" if="${property::exists('build.local')}" />
  </target>

  <!--======================= CONFIGURATION  =======================-->
  <!-- specify one or more of these targets before the main targets to initialize the correct configuration properties -->

  <target name="setdebug">
    <property name="build.compile-binaries" value="true" />
    <property name="build.copyresources" value="false" />
    <property name="build.createdoc" value="false" />
    <property name="project.config" value="debug" />
    <property name="build.debug" value="true" />
    <property name="build.csc.define" value="DEBUG;TRACE;"/>
    <property name="build.csc.define" value="${build.csc.define}NET11;" if="${nant.settings.currentframework == 'net-1.1'}"/>
    <call target="init-build-version" />
  </target>

  <target name="setrelease">
    <property name="build.compile-binaries" value="true" />
    <property name="build.copyresources" value="false" />
    <property name="build.createdoc" value="false" />
    <property name="project.config" value="release" />
    <property name="build.debug" value="false" />
    <property name="build.csc.define" value="TRACE;"/>
    <property name="build.csc.define" value="${build.csc.define}NET11;" if="${nant.settings.currentframework == 'net-1.1'}"/>
    <call target="init-build-version" />
  </target>

  <target name="setresources">
    <property name="build.compile-binaries" value="false" />
    <property name="build.copyresources" value="true" />
    <property name="build.createdoc" value="false" />
    <property name="project.config" value="documentation" />
    <property name="build.debug" value="false" />
    <call target="init-build-version" />
  </target>

  <target name="setdocumentation">
    <property name="build.compile-binaries" value="true" />
    <property name="build.copyresources" value="false" />
    <property name="build.createdoc" value="true" />
    <property name="project.config" value="documentation" />
    <property name="build.debug" value="false" />
    <property name="build.csc.define" value="TRACE;"/>
    <property name="build.csc.define" value="${build.csc.define}NET11;" if="${nant.settings.currentframework == 'net-1.1'}"/>
    <call target="init-build-version" />
  </target>

  <!--======================= VERSION =======================-->

  <target name="incversion">
    <buildversion versionfile="${solution.basedir}/build/buildversion.xml" increment="true" />
    <echo message="new version is ${build.version.noconfig}"/>
  </target>


  <!--======================= BuildNoDoc =======================-->
  <target name="buildnodoc" >
    <!--
    <call target="clean" />
    -->
    <call target="setresources" />
    <call target="all" />

    <call target="setdebug" />
    <call target="all" />
    <call target="alltests" />

    <call target="setrelease" />
    <call target="all" />
    <call target="alltests" />
  </target>

  <!--======================= PROJECTS =======================-->

  <target name="all" depends="Core, Development.Core, Development.CodeDom, Web, Web.Legacy, ObjectBinding, ObjectBinding.Web, 
      ObjectBinding.Reflection, Data.DomainObjects.ObjectBinding.Web, Data.DomainObjects.CodeGenerator, Data.DomainObjects.CodeGenerator.Console, 
      Data.DomainObjects.Web">
    <echo message="Target has executed."/>
  </target>

  <target name="forCooNet" depends="Core, Development.Core, Development.CodeDom, Web, Web.Legacy, ObjectBinding, ObjectBinding.Web">
    <echo message="Target has executed."/>
  </target>

  <target name="Core">
    <property name="project.name" value="Core" />
    <property name="project.dir" value="Core" />
    <property name="project.output" value="Rubicon.Core" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="Development.Core" depends="Core">
    <property name="project.name" value="Development.Core" />
    <property name="project.dir" value="Development/Core" />
    <property name="project.output" value="Rubicon.Development" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="Development.CodeDom" depends="Core">
    <property name="project.name" value="Development.CodeDom" />
    <property name="project.dir" value="Development/CodeDom" />
    <property name="project.output" value="Rubicon.Development.CodeDom" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="Data.DomainObjects" depends="Core">
    <property name="project.name" value="Rubicon.Data.DomainObjects" />
    <property name="project.dir" value="Data/DomainObjects" />
    <property name="project.output" value="Rubicon.Data.DomainObjects" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="Data.DomainObjects.CodeGenerator" depends="Core, Data.DomainObjects, Data.DomainObjects.ObjectBinding">
    <property name="project.name" value="Rubicon.Data.DomainObjects.CodeGenerator" />
    <property name="project.dir" value="Data/DomainObjects.CodeGenerator" />
    <property name="project.output" value="Rubicon.Data.DomainObjects.CodeGenerator" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="Data.DomainObjects.CodeGenerator.Console" depends="Core, Data.DomainObjects, Data.DomainObjects.CodeGenerator">
    <property name="project.name" value="Rubicon.Data.DomainObjects.CodeGenerator.Console" />
    <property name="project.dir" value="Data/DomainObjects.CodeGenerator.Console" />
    <property name="project.output" value="DOGen" />
    <property name="project.extension" value="exe" />
    <call target="build" />
  </target>

  <target name="Data.DomainObjects.ObjectBinding" depends="Core, Data.DomainObjects, ObjectBinding">
    <property name="project.name" value="Rubicon.Data.DomainObjects.ObjectBinding" />
    <property name="project.dir" value="Data/DomainObjects.ObjectBinding" />
    <property name="project.output" value="Rubicon.Data.DomainObjects.ObjectBinding" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="Data.DomainObjects.ObjectBinding.Web" 
      depends="Core, Data.DomainObjects, Data.DomainObjects.ObjectBinding, ObjectBinding, ObjectBinding.Web, Web">
    <property name="project.name" value="Rubicon.Data.DomainObjects.ObjectBinding.Web" />
    <property name="project.dir" value="Data/DomainObjects.ObjectBinding.Web" />
    <property name="project.output" value="Rubicon.Data.DomainObjects.ObjectBinding.Web" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="Data.DomainObjects.Web" depends="Core, Data.DomainObjects, Web">
    <property name="project.name" value="Rubicon.Data.DomainObjects.Web" />
    <property name="project.dir" value="Data/DomainObjects.Web" />
    <property name="project.output" value="Rubicon.Data.DomainObjects.Web" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="Web" depends="Core">
    <property name="project.name" value="Web" />
    <property name="project.dir" value="Web/Core" />
    <property name="project.output" value="Rubicon.Web" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="Web.Legacy" depends="Core, Web">
    <property name="project.name" value="Web.Legacy" />
    <property name="project.dir" value="Web/Legacy" />
    <property name="project.output" value="Rubicon.Web.Legacy" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="ObjectBinding" depends="Core">
    <property name="project.name" value="ObjectBinding" />
    <property name="project.dir" value="ObjectBinding/Core" />
    <property name="project.output" value="Rubicon.ObjectBinding" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="ObjectBinding.Web" depends="Core, ObjectBinding, Web">
    <property name="project.name" value="ObjectBinding.Web" />
    <property name="project.dir" value="ObjectBinding/Web" />
    <property name="project.output" value="Rubicon.ObjectBinding.Web" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="ObjectBinding.Reflection" depends="Core, ObjectBinding, ObjectBinding.Web, Web">
    <property name="project.name" value="ObjectBinding.Reflection" />
    <property name="project.dir" value="ObjectBinding/Reflection" />
    <property name="project.output" value="Rubicon.ObjectBinding.Reflection" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <!--======================= UNIT TESTS =======================-->

  <target name="alltests" depends="CoreTest, Development.CoreTest, Web.UnitTests, ObjectBinding.Web.UnitTests, Data.DomainObjects.UnitTests,
    Data.DomainObjects.ObjectBinding.UnitTests">
    <echo message="Target has executed." />
  </target>

  <target name="CoreTest">
    <call target="Core" cascade="false"/>
    <call target="Development.Core" cascade="false"/>
  
    <property name="project.name" value="Core.Test" />
    <property name="project.dir" value="Core.Test" />
    <property name="project.output" value="Rubicon.Core.UnitTests" />
    <property name="project.extension" value="dll" />
    <call target="buildtest" />
    <nunit2>
      <formatter type="Plain" />
      <test assemblyname="${build.test.outputdir}/${project.output}.${project.extension}" />
    </nunit2>
  </target>

  <target name="Development.CoreTest">
    <call target="Development.Core" cascade="false"/>

    <property name="project.name" value="Development.Core.Test" />
    <property name="project.dir" value="Development/Core.Test" />
    <property name="project.output" value="Rubicon.Development.UnitTests" />
    <property name="project.extension" value="dll" />
    <call target="buildtest" />
    <nunit2>
      <formatter type="Plain" />
      <test assemblyname="${build.test.outputdir}/${project.output}.${project.extension}" />
    </nunit2>
  </target>

  <target name="Web.UnitTests">
    <call target="Core" cascade="false"/>
    <call target="Development.Core" cascade="false"/>
    <call target="Web" cascade="false"/>

    <property name="project.name" value="Web.UnitTests" />
    <property name="project.dir" value="Web/UnitTests" />
    <property name="project.output" value="Rubicon.Web.UnitTests" />
    <property name="project.extension" value="dll" />
    <call target="buildtest" />
    <nunit2>
      <formatter type="Plain" />
      <test assemblyname="${build.test.outputdir}/${project.output}.${project.extension}" />
    </nunit2>
  </target>

  <target name="ObjectBinding.Web.UnitTests">
    <call target="Core" cascade="false"/>
    <call target="Development.Core" cascade="false"/>
    <call target="ObjectBinding" cascade="false"/>
    <call target="ObjectBinding.Reflection" cascade="false"/>
    <call target="Web" cascade="false"/>
    <call target="Web.UnitTests" cascade="false"/>

    <property name="project.name" value="ObjectBinding.Web.UnitTests" />
    <property name="project.dir" value="ObjectBinding/Web.UnitTests" />
    <property name="project.output" value="Rubicon.ObjectBinding.Web.UnitTests" />
    <property name="project.extension" value="dll" />
    <call target="buildtest" />
    <nunit2>
      <formatter type="Plain" />
      <test assemblyname="${build.test.outputdir}/${project.output}.${project.extension}" />
    </nunit2>
  </target>

  <target name="Data.DomainObjects.UnitTests">
    <call target="Core" cascade="false"/>
    <call target="Data.DomainObjects" cascade="false"/>

    <property name="project.name" value="Rubicon.Data.DomainObjects.UnitTests" />
    <property name="project.dir" value="Data/DomainObjects.UnitTests" />
    <property name="project.output" value="Rubicon.Data.DomainObjects.UnitTests" />
    <property name="project.extension" value="dll" />
    <exec program="osql.exe" basedir="${sql.dir}">
      <arg line="-S ${sql.instance}" />
      <arg value="-E" />
      <arg value="-n" />
      <arg line="-i ${project.basedir}\Database\CreateDB.sql" />
    </exec>
    <exec program="osql.exe" basedir="${sql.dir}">
      <arg line="-S ${sql.instance}" />
      <arg value="-E" />
      <arg value="-n" />
      <arg line="-i ${project.basedir}\Database\setupDB.sql" />
    </exec>
    <copy todir="${build.test.outputdir}" overwrite="true" flatten="true">
      <fileset >
        <include name="${project.dir}/Database/*.sql" />
        <include name="${project.dir}/*.xml" />
      </fileset>
    </copy>
    <call target="buildtest" />
    <nunit2>
      <formatter type="Plain" />
      <test assemblyname="${build.test.outputdir}/${project.output}.${project.extension}" />
    </nunit2>
  </target>

  <target name="Data.DomainObjects.ObjectBinding.UnitTests">
    <call target="Core" cascade="false"/>
    <call target="Data.DomainObjects" cascade="false"/>
    <call target="Data.DomainObjects.ObjectBinding" cascade="false"/>
    <call target="ObjectBinding" cascade="false"/>

    <property name="project.name" value="Rubicon.Data.DomainObjects.ObjectBinding.UnitTests" />
    <property name="project.dir" value="Data/DomainObjects.ObjectBinding.UnitTests" />
    <property name="project.output" value="Rubicon.Data.DomainObjects.ObjectBinding.UnitTests" />
    <property name="project.extension" value="dll" />
    <exec program="osql.exe" basedir="${sql.dir}">
      <arg line="-S ${sql.instance}" />
      <arg value="-E" />
      <arg value="-n" />
      <arg line="-i ${project.basedir}\Database\CreateDB.sql" />
    </exec>
    <exec program="osql.exe" basedir="${sql.dir}">
      <arg line="-S ${sql.instance}" />
      <arg value="-E" />
      <arg value="-n" />
      <arg line="-i ${project.basedir}\Database\setupDB.sql" />
    </exec>
    <copy todir="${build.test.outputdir}" overwrite="true" flatten="true">
      <fileset >
        <include name="${project.dir}/Database/*.sql" />
        <include name="${project.dir}/*.xml" />
      </fileset>
    </copy>
    <call target="buildtest" />
    <nunit2>
      <formatter type="Plain" />
      <test assemblyname="${build.test.outputdir}/${project.output}.${project.extension}" />
    </nunit2>
  </target>

  <!--======================= CLEANING =======================-->

  <target name="cleantemp" depends="setdocumentation">
    <delete dir="${build.temp.basedir}" failonerror="false" />
  </target>

  <target name="clean" depends="setdocumentation">
    <delete dir="${build.basedir}" failonerror="false" />
  </target>

  <target name="zipfilename" depends="setdocumentation">
    <property name="zipfile.filename" value="RubiconCommons_${build.version.noconfig}.zip" />
    <property name="zipfile.name" value="${build.basedir}/${zipfile.filename}" />
    <property name="sourcezipfile.filename" value="RubiconCommons_SourceCode_${build.version.noconfig}.zip" />
    <property name="sourcezipfile.name" value="${build.basedir}/${sourcezipfile.filename}" />
    <echo message="Zipfile is ${zipfile.name}"/>
    <echo message="SourceZipfile is ${sourcezipfile.name}"/>
  </target>

  <target name="zip" depends="zipfilename">
    <delete file="${zipfile.name}" />
    <zip zipfile="${zipfile.name}">
      <fileset basedir="${build.basedir}">
        <include name="**/*" />
        <exclude name="${sourcezipfile.name}" />
        <exclude name="*/bin/documentation/**/*" />
        <exclude name="${build.temp.basedir}" />
      </fileset>
    </zip>
  </target>

  <target name="sourcezip" depends="zipfilename">
    <delete file="${sourcezipfile.name}" failonerror="false" />
    <zip zipfile="${sourcezipfile.name}">
      <fileset basedir="${solution.basedir}">
        <include name="Core/**/*" />
        <include name="Core.Test/**/*" />
        <include name="Development/**/*" />
        <include name="Data/**/*" />
        <include name="ObjectBinding/**/*" />
        <include name="Web/**/*" />
        <include name="build/*.xml" />
        <exclude name="**/obj/**/*.*" />
        <exclude name="**/bin/**/*.*" />
        <exclude name="**/*.zip" />
        <exclude name="**/*.dll" />
        <exclude name="**/*.exe" />
        <exclude name="**/*.pdb" />
      </fileset>
    </zip>
  </target>

  <target name="getcurrent" depends="init-build-version">
    <property name="local.currentdir" value="${solution.basedir}/build/Current" />

    <delete dir="${local.currentdir}" failonerror="false" />

    <copy todir="${local.currentdir}" overwrite="true">
      <fileset basedir="${build.basedir}">
        <include name="**/*" />
      </fileset>
    </copy>
  </target>

</project>
