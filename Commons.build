<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="nant-schema" name="Rubicon.CooNet">

  <target name="debug" depends="setdebug,all" />
  <target name="release" depends="setrelease,all" />
  <target name="resources" depends="setresources,all" />
  <target name="doc" depends="doc-public,doc-internal" />
  <target name="deploy" depends="cleantemp,zip,sourcezip,getcurrent" />

  <include buildfile="build/properties.include.xml"/>

  <property name="doc.sdkdocversion" value="SDK_v1_1" />
  <property name="dir.development" value="\development" overwrite="false"/>
  <property name="global.dir" value="${dir.development}\global"/>
  <property name="solution.basedir" value="${nant.project.basedir}" />
  <property name="prereq.assemblies" value="${nant.project.basedir}/prereq/assemblies" />

  <property name="build.keyfile" value="${global.dir}\rubicon.snk" />
  <property name="dummy" value="true" />

  <target name="local" depends="initNoConfig" description="make local build into directory build/current">
    <property name="build.local" value="true" />
  </target>

  <target name="initNoConfig">
    <buildversion versionfile="build/buildversion.xml" increment="false" />
    <echo message="new version is ${build.version.noconfig}"/>
    <property name="build.basedir" value="${solution.basedir}/build/${build.version.noconfig}" />
    <if propertyexists="build.local">
      <property name="build.basedir" value="${solution.basedir}/build/Current" />
    </if>
    <property name="doc.targetdir" value="${build.basedir}/${nant.settings.currentframework}/doc" />
  </target>

  <target name="initialize" depends="initNoConfig">
    <!-- make sure that one of the set...-targets was called -->
    <property name="local.setnotcalled" value="true"/>
    <if propertyexists="project.config">
      <property name="local.setnotcalled" value="false"/>
    </if>
    <if propertytrue="local.setnotcalled">
      <fail message="Specify a set&lt;configuration&gt; target first. (setdebug, setrelease or setdocumentation)" />
    </if>

    <property name="project.builddir" value="${build.basedir}/${nant.settings.currentframework}/bin/${project.config}" />
    <property name="project.tempdir" value="${build.basedir}/temp/${nant.settings.currentframework}/${project.config}" />
    <property name="tests.builddir" value="${build.basedir}/temp/${nant.settings.currentframework}/tests/${project.config}" />
  </target>

  <!--======================= CONFIGURATION  =======================-->
  <!-- specify one or more of these targets before the main targets to initialize the correct configuration properties -->

  <target name="setdebug">
    <property name="build.copyresources" value="false" />
    <property name="build.createdoc" value="false" />
    <property name="project.config" value="debug" />
    <property name="build.debug" value="true" />
    <property name="build.csc.define" value="DEBUG;TRACE" />
    <call target="initialize" />
  </target>

  <target name="setrelease">
    <property name="build.copyresources" value="false" />
    <property name="build.createdoc" value="false" />
    <property name="project.config" value="release" />
    <property name="build.debug" value="false" />
    <property name="build.csc.define" value="TRACE" />
    <call target="initialize" />
  </target>

  <target name="setresources">
    <property name="project.config" value="documentation" />
    <property name="build.copyresources" value="true" />
    <call target="initialize" />
  </target>

  <target name="setdocumentation">
    <property name="build.copyresources" value="false" />
    <property name="build.createdoc" value="true" />
    <property name="project.config" value="documentation" />
    <property name="build.debug" value="false" />
    <property name="build.csc.define" value="DEBUG;TRACE" />
    <call target="initialize" />
  </target>

  <!--======================= VERSION =======================-->

  <target name="incversion">
    <buildversion versionfile="build/buildversion.xml" increment="true" />
    <echo message="new version is ${build.version.noconfig}"/>
  </target>


  <!--======================= SS Command =======================-->
  <target name="SSCommandline">
    <ifnot propertyexists="SS.dir" >
      <property name="SS.dir" value="." />
    </ifnot>
    <exec program="SS.EXE" commandline="${SS.command} -I- -Ybuild,buildpw" basedir="C:\Program Files\Microsoft Visual Studio\VSS\win32"
                                     workingdir="${SS.dir}" >
      <environment>
        <variable name="SSDIR" value="\\at-vie-dc-02\Development\VSSDB\rubicon" />
      </environment>
    </exec>
  </target>

  <!--======================= LABEL =======================-->
  <target name="label">
    <buildversion versionfile="build/buildversion.xml" increment="false" />
    <echo message="labeling with ${build.version.noconfig}"/>
    <property name="SS.command" value="Label $/libraries/commons -L${build.version.noconfig}" />
    <call target="SSCommandline" />
  </target>

  <!--======================= CheckZip =======================-->
  <target name="checkzip" depends="zipfilename">
    <property name="ToDir" value="\\at-vie-dc-02\Development\build\libraries\Commons\build\"/>
    <available type="File" resource="${ToDir}${zipfile.filename}" property="zipfile.present" />
    <available type="File" resource="${ToDir}${sourcezipfile.filename}" property="zipfile.present" unless="${zipfile.present}"/>
    <fail message="ZipFile existiert bereits" if="${zipfile.present}" />
  </target>


  <!--======================= AddZip =======================-->
  <target name="addzip" depends="checkzip">
    <copy file="${zipfile.name}" todir="${ToDir}" />  
    <copy file="${sourcezipfile.name}" todir="${ToDir}" />  
  </target>

  <!--======================= GetAll =======================-->
  <target name="getall" >
    <foreach item="String" in="Core Core.Test Data Development ObjectBinding prereq Web" delim=" " property="local.project" >
      <do>
        <mkdir dir="${dir.development}\libraries\Commons\${local.project}" />
        <exec program="cmd" commandline="/C del *.* /S /Q /F > NUL" workingdir="${dir.development}\libraries\Commons\${local.project}" />
        <exec program="cmd" commandline="/C for /d %d in (*) do rmdir /S /Q %d > NUL" workingdir="${dir.development}\libraries\Commons\${local.project}" />
        <echo message="Get ${local.project}" />
        <property name="SS.command" value="Get $/libraries/Commons/${local.project} -R" />
        <property name="SS.dir" value="${dir.development}\libraries\Commons\${local.project}" />
        <call target="SSCommandline" />
      </do>
    </foreach>

    <mkdir dir="${dir.development}\libraries\Commons\build" />
    <property name="SS.dir" value="${dir.development}\libraries\Commons\build" />
    <property name="SS.command" value="Get $/libraries/Commons/build/properties.include.xml" />
    <call target="SSCommandline" />
    <property name="SS.command" value="Get $/libraries/Commons/build/buildversion.xml" />
    <call target="SSCommandline" />

  </target>

  <!--======================= BuildNoDoc =======================-->
  <target name="buildnodoc" >
    <call target="clean" />
    <call target="resources" />
    <call target="setdebug" />
    <call target="all" />
    <call target="alltests" />
    <call target="setrelease" />
    <call target="all" />
    <call target="alltests" />
  </target>

  <!--======================= startnewversion =======================-->
  <target name="startnewversion" >
    <property name="SS.dir" value="${dir.development}\libraries\Commons\build" />
    <property name="SS.command" value="Checkout $/libraries/Commons/build/buildversion.xml" />
    <call target="SSCommandline" />
    <call target="incversion" />
    <property name="SS.command" value="Checkin $/libraries/Commons/build/buildversion.xml" />
    <call target="SSCommandline" />
    <call target="label" />
  </target>

  <!--======================= VS.NET =======================-->
  <target name="preparevs">
    <call target="setdocumentation" />

    <property name="project.name" value="Core" />
    <property name="project.dir" value="Core" />
    <call target="vsassemblyinfo" />

    <property name="project.name" value="Core.Test" />
    <property name="project.dir" value="Core.Test" />
    <call target="vsassemblyinfo" />

    <property name="project.name" value="Development" />
    <property name="project.dir" value="Development/Core" />
    <call target="vsassemblyinfo" />

    <property name="project.name" value="Development.Core.Test" />
    <property name="project.dir" value="Development/Core.Test" />
    <call target="vsassemblyinfo" />

    <property name="project.name" value="Development.CodeDom" />
    <property name="project.dir" value="Development/CodeDom" />
    <call target="vsassemblyinfo" />

    <property name="project.name" value="Web" />
    <property name="project.dir" value="Web/Core" />
    <call target="vsassemblyinfo" />

    <property name="project.name" value="ObjectBinding" />
    <property name="project.dir" value="ObjectBinding/Core" />
    <call target="vsassemblyinfo" />

    <property name="project.name" value="ObjectBinding.Web" />
    <property name="project.dir" value="ObjectBinding/Web" />
    <call target="vsassemblyinfo" />

    <property name="project.name" value="ObjectBinding.Reflection" />
    <property name="project.dir" value="ObjectBinding/Reflection" />
    <call target="vsassemblyinfo" />
  </target>

  <!--======================= PROJECTS =======================-->

  <target name="all" 
      depends="Core,DevelopmentCore,CodeDom,Web,ObjectBinding,ObjectBinding.Web,ObjectBinding.Reflection,Data.DomainObjects.ObjectBinding.Web,Data.DomainObjects.CodeGenerator,Data.DomainObjects.CodeGenerator.Console" />

  <target name="forCooNet" 
      depends="Core,DevelopmentCore,CodeDom,Web,ObjectBinding,ObjectBinding.Web" />
  
  <target name="Core" depends="initialize">
    <property name="project.name" value="Core" />
    <property name="project.dir" value="Core" />
    <property name="project.output" value="Rubicon.Core" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="DevelopmentCore" depends="initialize">
    <property name="project.name" value="Development.Core" />
    <property name="project.dir" value="Development/Core" />
    <property name="project.output" value="Rubicon.Development" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="CodeDom" depends="Core,initialize">
    <property name="project.name" value="Development.CodeDom" />
    <property name="project.dir" value="Development/CodeDom" />
    <property name="project.output" value="Rubicon.Development.CodeDom" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="Data.DomainObjects" depends="Core,initialize">
    <property name="project.name" value="Rubicon.Data.DomainObjects" />
    <property name="project.dir" value="Data/DomainObjects" />
    <property name="project.output" value="Rubicon.Data.DomainObjects" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="Data.DomainObjects.CodeGenerator" depends="Data.DomainObjects,initialize">
    <property name="project.name" value="Rubicon.Data.DomainObjects.CodeGenerator" />
    <property name="project.dir" value="Data/DomainObjects.CodeGenerator" />
    <property name="project.output" value="Rubicon.Data.DomainObjects.CodeGenerator" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="Data.DomainObjects.CodeGenerator.Console" depends="Data.DomainObjects.CodeGenerator,initialize">
    <property name="project.name" value="Rubicon.Data.DomainObjects.CodeGenerator.Console" />
    <property name="project.dir" value="Data/DomainObjects.CodeGenerator.Console" />
    <property name="project.output" value="DOGen" />
    <property name="project.extension" value="exe" />
    <call target="build" />
  </target>

  <target name="Data.DomainObjects.ObjectBinding" depends="Data.DomainObjects,initialize">
    <property name="project.name" value="Rubicon.Data.DomainObjects.ObjectBinding" />
    <property name="project.dir" value="Data/DomainObjects.ObjectBinding" />
    <property name="project.output" value="Rubicon.Data.DomainObjects.ObjectBinding" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="Data.DomainObjects.ObjectBinding.Web" depends="Data.DomainObjects.ObjectBinding,initialize">
    <property name="project.name" value="Rubicon.Data.DomainObjects.ObjectBinding.Web" />
    <property name="project.dir" value="Data/DomainObjects.ObjectBinding.Web" />
    <property name="project.output" value="Rubicon.Data.DomainObjects.ObjectBinding.Web" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="Web" depends="Core,initialize">
    <property name="project.name" value="Web" />
    <property name="project.dir" value="Web/Core" />
    <property name="project.output" value="Rubicon.Web" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="ObjectBinding" depends="Core,initialize">
    <property name="project.name" value="ObjectBinding" />
    <property name="project.dir" value="ObjectBinding/Core" />
    <property name="project.output" value="Rubicon.ObjectBinding" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="ObjectBinding.Web" depends="Core,ObjectBinding,initialize">
    <property name="project.name" value="ObjectBinding.Web" />
    <property name="project.dir" value="ObjectBinding/Web" />
    <property name="project.output" value="Rubicon.ObjectBinding.Web" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <target name="ObjectBinding.Reflection" depends="Core,ObjectBinding,initialize">
    <property name="project.name" value="ObjectBinding.Reflection" />
    <property name="project.dir" value="ObjectBinding/Reflection" />
    <property name="project.output" value="Rubicon.ObjectBinding.Reflection" />
    <property name="project.extension" value="dll" />
    <call target="build" />
  </target>

  <!--======================= UNIT TESTS =======================-->

  <target name="alltests" depends="CoreTest, DevelopmentCoreTest, Data.DomainObjects.UnitTests" />

  <target name="CoreTest" depends="Core,DevelopmentCore">
    <property name="project.name" value="Core.Test" />
    <property name="project.dir" value="Core.Test" />
    <property name="project.output" value="Rubicon.Core.UnitTests" />
    <property name="project.extension" value="dll" />
    <call target="buildtest" />
    <nunit2>
      <test assemblyname="${tests.builddir}/Rubicon.Core.UnitTests.dll" />
    </nunit2>
  </target>

  <target name="DevelopmentCoreTest" depends="Core,DevelopmentCore">
    <property name="project.name" value="Development.Core.Test" />
    <property name="project.dir" value="Development/Core.Test" />
    <property name="project.output" value="Rubicon.Development.UnitTests" />
    <property name="project.extension" value="dll" />
    <call target="buildtest" />
    <nunit2>
      <test assemblyname="${tests.builddir}/Rubicon.Development.UnitTests.dll" />
    </nunit2>
  </target>

  <target name="Data.DomainObjects.UnitTests" depends="Data.DomainObjects">
    <property name="project.name" value="Rubicon.Data.DomainObjects.UnitTests" />
    <property name="project.dir" value="Data/DomainObjects.UnitTests" />
    <property name="project.output" value="Rubicon.Data.DomainObjects.UnitTests" />
    <property name="project.extension" value="dll" />
    <exec program="osql.exe" 
          commandline="-E -i ${dir.development}\libraries\Commons\Data\DomainObjects\UnitTests\Database\CreateDB.sql"
          basedir="C:\Program Files\Microsoft SQL Server\80\Tools\Binn">
    </exec>
    <exec program="osql.exe" 
          commandline="-E -i ${dir.development}\libraries\Commons\Data\DomainObjects\UnitTests\Database\setupDB.sql"
          basedir="C:\Program Files\Microsoft SQL Server\80\Tools\Binn">
    </exec>
    <copy todir="${tests.builddir}" >
      <fileset basedir="${project.dir}/Database/">
        <includes name="*.sql" />
      </fileset>
    </copy>
    <copy todir="${tests.builddir}" >
      <fileset basedir="${project.dir}/">
        <includes name="*.xml" />
      </fileset>
    </copy>
    <copy todir="${tests.builddir}" >
      <fileset basedir="${project.dir}/../">
        <includes name="*.xsd" />
      </fileset>
    </copy>
    <call target="buildtest" />
    <nunit2>
      <test assemblyname="${tests.builddir}/Rubicon.Data.DomainObjects.UnitTests.dll" />
    </nunit2>
  </target>

  <!--======================= BUILD =======================-->

  <target name="build">
    <if if="${build.copyresources}" propertyexists="dummy">
      <copy todir="${build.basedir}/res/${project.output}" >
        <fileset basedir="${project.dir}/res">
          <includes name="**/*" />
        </fileset>
      </copy>
      <copy todir="${build.basedir}" flatten="true">
        <fileset basedir="${project.dir}/">
          <includes name="**/WhatsNew*" />
        </fileset>
      </copy>
      <copy todir="${build.basedir}" flatten="true">
        <fileset basedir="${project.dir}/">
          <includes name="Doc/Readme*" />
        </fileset>
      </copy>
      <copy todir="${build.basedir}/schema/${project.output}" flatten="true">
        <fileset basedir="${project.dir}/">
          <includes name="**/*.xsd" />
        </fileset>
      </copy>
    <!-- else --> </if> <if unless="${build.copyresources}" propertyexists="dummy">
      <echo message="building ${project.output}.${project.extension} ${build.version}"/>

      <if if="${build.createdoc}" propertyexists="dummy">
        <property name="project.doc" value="${project.builddir}/${project.output}.xml" />
        <!-- else -->
      </if>
      <if unless="${build.createdoc}" propertyexists="dummy">
        <property name="project.doc" value="${project.tempdir}/${project.output}.complete.xml" />
      </if>

      <property name="project.basedir" value="${nant.project.basedir}/${project.dir}" />

      <mkdir dir="${project.builddir}"/>
      <mkdir dir="${project.tempdir}"/>
      <call target="prepareassemblyinfo" />

      <copy todir="${project.builddir}" file="${prereq.assemblies}/log4net.dll" overwrite="true"/>

      <nant buildfile="${project.dir}/${project.name}.build" target="build" />

      <if unless="${build.createdoc}" propertyexists="dummy">
        <style style="${global.dir}/xslt/xmldoc.xslt" in="${project.doc}" out="${project.builddir}/${project.output}.xml" />
      </if>
    </if>
  </target>

  <target name="buildtest">
    <echo message="building unit tests ${project.output}.${project.extension} ${build.version}"/>
    <property name="project.doc" value="" />

    <property name="project.basedir" value="${nant.project.basedir}/${project.dir}" />

    <mkdir dir="${tests.builddir}"/>

    <copy todir="${tests.builddir}" file="${prereq.assemblies}/nunit.framework.dll" overwrite="true"/>
    <copy todir="${tests.builddir}">
      <fileset basedir="${project.builddir}">
        <includes name="*.dll" />
        <includes name="*.pdb" />
      </fileset>
    </copy>

    <call target="prepareassemblyinfo" />

    <nant buildfile="${project.dir}/${project.name}.build" target="build" />
  </target>

  <target name="prepareassemblyinfo">
    <copy file="${project.basedir}/AssemblyInfoTemplate.cs"  tofile="${project.basedir}/AssemblyInfo.cs" overwrite="true" />
    <attrib readonly="false" file="${project.basedir}/AssemblyInfo.cs"/>
    <replace>
      <filterset>
        <filter token="keyfile" value="${build.keyfile}" />
        <filter token="versionnumber" value="${build.version}" />
        <filter token="buildinfo" value=".NET Framework: ${nant.settings.currentframework}, build type: ${project.config}" />
        <filter token="company" value="${text.companyname}" />
        <filter token="copyright" value="${text.copyright}" />
        <filter token="productname" value="${text.productname}" />
      </filterset>
      <fileset>
        <includes name="${project.basedir}/AssemblyInfo.cs" />
      </fileset>
    </replace>
    <attrib readonly="true" file="${project.basedir}/AssemblyInfo.cs"/>
  </target>

  <target name="vsassemblyinfo" description="prepare assembly info for VS.NET">
    <property name="project.basedir" value="${nant.project.basedir}/${project.dir}" />
    <copy file="${project.basedir}/AssemblyInfoTemplate.cs"  tofile="${project.basedir}/AssemblyInfo.cs" overwrite="true" />
    <attrib readonly="false" file="${project.basedir}/AssemblyInfo.cs"/>
    <replace>
      <filterset>
        <filter token="keyfile" value="${build.keyfile}" />
        <filter token="versionnumber" value="${build.version.major}.${build.version.minor}.${build.version.build}.*" />
        <filter token="buildinfo" value="VS.NET build" />
        <filter token="company" value="${text.companyname}" />
        <filter token="copyright" value="${text.copyright}" />
        <filter token="productname" value="${text.productname}" />
      </filterset>
      <fileset>
        <includes name="${project.basedir}/AssemblyInfo.cs" />
      </fileset>
    </replace>
    <attrib readonly="true" file="${project.basedir}/AssemblyInfo.cs"/>
  </target>

  <!--======================= DOCUMENTATION =======================-->

  <target name="doc-public" depends="setdocumentation,all">
    <property name="doc.suffix" value="" />

    <property name="doc.filebase" value="${text.productshortname}${doc.suffix}" />
    <property name="doc.tempdir" value="${project.tempdir}/doc${doc.suffix}" />
    <mkdir dir="${doc.tempdir}"/>
    <mkdir dir="${doc.targetdir}"/>
    <ndoc>
      <assemblies basedir="${project.builddir}" failonempty="true">
        <includes name="Rubicon.Core.dll" />
        <includes name="Rubicon.Development.dll" />
        <includes name="Rubicon.Development.CodeDom.dll" />
        <includes name="Rubicon.Data.DomainObjects.dll" />
        <includes name="Rubicon.Data.DomainObjects.ObjectBinding.dll" />
        <includes name="Rubicon.Data.DomainObjects.ObjectBinding.Web.dll" />
        <includes name="Rubicon.Data.DomainObjects.CodeGenerator.dll" />
        <includes name="Rubicon.Web.dll" />
        <includes name="Rubicon.ObjectBinding.dll" />
        <includes name="Rubicon.ObjectBinding.Web.dll" />
        <includes name="Rubicon.ObjectBinding.Reflection.dll" />
      </assemblies>
      <documenters>
        <documenter name="MSDN">
          <property name="OutputDirectory" value="${doc.tempdir}" />
          <property name="LinkToSdkDocVersion" value="${doc.sdkdocversion}" />
          <property name="HtmlHelpName" value="${doc.filebase}" />
          <property name="HtmlHelpCompilerFilename" value="hhc.exe" />
          <property name="IncludeFavorites" value="False" />
          <property name="Title" value="${text.productname}" />
          <property name="SplitTOCs" value="False" />
          <property name="DefaulTOC" value="" />
          <property name="ShowVisualBasic" value="True" />
          <property name="ShowMissingSummaries" value="False" />
          <property name="ShowMissingRemarks" value="False" />
          <property name="ShowMissingParams" value="False" />
          <property name="ShowMissingReturns" value="False" />
          <property name="ShowMissingValues" value="False" />
          <property name="DocumentInternals" value="False" />
          <property name="DocumentProtected" value="True" />
          <property name="DocumentPrivates" value="False" />
          <property name="DocumentEmptyNamespaces" value="False" />
          <property name="IncludeAssemblyVersion" value="False" />
          <property name="CopyrightText" value="${text.companyname}" />
          <property name="CopyrightHref" value="${text.companyurl}" />
          <property name="RootPageTOCName" value="Getting Started" />
          <property name="RootPageFileName" value="${nant.project.basedir}/Core/Doc/include/GettingStarted.html" />
          <property name="RootPageContainsNamespaces" value="False" />
        </documenter>
      </documenters>
      <summaries>
        <includes name="${nant.project.basedir}/Core/Doc/include/NamespaceDoc.xml"/>
        <includes name="${nant.project.basedir}/Web/Core/Doc/include/NamespaceDoc.xml"/>
        <includes name="${nant.project.basedir}/ObjectBinding/Core/Doc/include/NamespaceDoc.xml"/>
        <includes name="${nant.project.basedir}/ObjectBinding/Web/Doc/include/NamespaceDoc.xml"/>
        <includes name="${nant.project.basedir}/Data/DomainObjects/Doc/include/NamespaceDoc.xml"/>
      </summaries>
    </ndoc>
    <copy file="${doc.tempdir}/${doc.filebase}.chm" todir="${doc.targetdir}" />
  </target>

  <target name="doc-internal" depends="setdocumentation,all">
    <property name="doc.suffix" value="Internal" />

    <property name="doc.filebase" value="${text.productshortname}${doc.suffix}" />
    <property name="doc.tempdir" value="${project.tempdir}/doc${doc.suffix}" />
    <mkdir dir="${doc.tempdir}"/>
    <mkdir dir="${doc.targetdir}"/>
    <ndoc>
      <assemblies basedir="${project.builddir}" failonempty="true">
        <includes name="Rubicon.Core.dll" />
        <includes name="Rubicon.Development.dll" />
        <includes name="Rubicon.Development.CodeDom.dll" />
        <includes name="Rubicon.Data.DomainObjects.dll" />
        <includes name="Rubicon.Data.DomainObjects.ObjectBinding.dll" />
        <includes name="Rubicon.Data.DomainObjects.ObjectBinding.Web.dll" />
        <includes name="Rubicon.Data.DomainObjects.CodeGenerator.dll" />
        <includes name="Rubicon.Web.dll" />
        <includes name="Rubicon.ObjectBinding.dll" />
        <includes name="Rubicon.ObjectBinding.Web.dll" />
        <includes name="Rubicon.ObjectBinding.Reflection.dll" />
      </assemblies>
      <documenters>
        <documenter name="MSDN">
          <property name="OutputDirectory" value="${doc.tempdir}" />
          <property name="LinkToSdkDocVersion" value="${doc.sdkdocversion}" />
          <property name="HtmlHelpName" value="${doc.filebase}" />
          <property name="HtmlHelpCompilerFilename" value="hhc.exe" />
          <property name="IncludeFavorites" value="False" />
          <property name="Title" value="${text.productname} Internal" />
          <property name="SplitTOCs" value="False" />
          <property name="DefaulTOC" value="" />
          <property name="ShowVisualBasic" value="False" />
          <property name="ShowMissingSummaries" value="True" />
          <property name="ShowMissingRemarks" value="True" />
          <property name="ShowMissingParams" value="True" />
          <property name="ShowMissingReturns" value="True" />
          <property name="ShowMissingValues" value="True" />
          <property name="DocumentInternals" value="True" />
          <property name="DocumentProtected" value="True" />
          <property name="DocumentPrivates" value="True" />
          <property name="DocumentEmptyNamespaces" value="True" />
          <property name="IncludeAssemblyVersion" value="True" />
          <property name="CopyrightText" value="${text.companyname}" />
          <property name="CopyrightHref" value="${text.companyurl}" />
          <property name="RootPageTOCName" value="Getting Started" />
          <property name="RootPageFileName" value="${nant.project.basedir}/Core/Doc/include/GettingStarted.html" />
          <property name="RootPageContainsNamespaces" value="False" />
        </documenter>
      </documenters>
      <summaries>
        <includes name="${nant.project.basedir}/Core/Doc/include/NamespaceDoc.xml"/>
        <includes name="${nant.project.basedir}/Web/Core/Doc/include/NamespaceDoc.xml"/>
        <includes name="${nant.project.basedir}/ObjectBinding/Core/Doc/include/NamespaceDoc.xml"/>
        <includes name="${nant.project.basedir}/ObjectBinding/Web/Doc/include/NamespaceDoc.xml"/>
        <includes name="${nant.project.basedir}/Data/DomainObjects/Doc/include/NamespaceDoc.xml"/>
      </summaries>
    </ndoc>
    <copy file="${doc.tempdir}/${doc.filebase}.chm" todir="${doc.targetdir}" />
  </target>

  <!--======================= CLEANING =======================-->

  <target name="cleantemp" depends="setdocumentation">
    <exec program="cmd" commandline="/C del *.* /S /Q /F > NUL" workingdir="${build.basedir}\temp" failonerror="false"/>
    <exec program="cmd" commandline="/C for /d %d in (*) do rmdir /S /Q %d > NUL" workingdir="${build.basedir}\temp" failonerror="false"/>
    <delete>
      <fileset failonempty="false">
        <includes name="${build.basedir}/temp/**/*"/>
        <includes name="${build.basedir}/temp"/>
      </fileset>
    </delete>
  </target>

  <target name="clean" depends="setdocumentation">
    <exec program="cmd" commandline="/C del *.* /S /Q /F > NUL" workingdir="${build.basedir}" failonerror="false"/>
    <exec program="cmd" commandline="/C for /d %d in (*) do rmdir /S /Q %d > NUL" workingdir="${build.basedir}" failonerror="false"/>
    <delete>
      <fileset failonempty="false">
        <includes name="${build.basedir}/**/*"/>
        <includes name="${build.basedir}"/>
      </fileset>
    </delete>
  </target>

  <target name="zipfilename" depends="setdocumentation">
    <property name="zipfile.filename" value="RubiconCommons_${build.version.noconfig}.zip" />
    <property name="zipfile.name" value="${build.basedir}/${zipfile.filename}" />
    <property name="sourcezipfile.filename" value="RubiconCommons_SourceCode_${build.version.noconfig}.zip" />
    <property name="sourcezipfile.name" value="${build.basedir}/${sourcezipfile.filename}" />
    <echo message="Zipfile is ${zipfile.name}"/>
    <echo message="SourceZipfile is ${sourcezipfile.name}"/>
  </target>

  <target name="zip" depends="zipfilename">
    <delete file="${zipfile.name}" failonerror="false" />
    <zip zipfile="${zipfile.name}">
      <fileset basedir="${build.basedir}">
        <includes name="**/*" />
        <excludes name="*/bin/documentation/*" />
        <excludes name="temp/**/*" />
      </fileset>
    </zip>
  </target>

  <target name="sourcezip" depends="zipfilename">
    <delete file="${sourcezipfile.name}" failonerror="false" />
    <zip zipfile="${sourcezipfile.name}">
      <fileset>
        <includes name="Core/**/*" />
        <includes name="Core.Test/**/*" />
        <includes name="Development/**/*" />
        <includes name="Data/**/*" />
        <includes name="ObjectBinding/**/*" />
        <includes name="Web/**/*" />
        <includes name="build/*.xml" />
        <excludes name="**/*.zip" />
        <excludes name="**/*.dll" />
        <excludes name="**/*.exe" />
        <excludes name="**/*.pdb" />
      </fileset>
    </zip>
  </target>

  <target name="getcurrent" depends="initNoConfig">
    <property name="local.currentdir" value="${solution.basedir}/build/Current" />

    <delete failonerror="false">
      <fileset>
        <includes name="${local.currentdir}//*" />
        <includes name="${local.currentdir}" />
      </fileset>
    </delete>

    <copy todir="${local.currentdir}">
      <fileset basedir="${build.basedir}">
        <includes name="**/*" />
      </fileset>
    </copy>
  </target>

</project>
