<?xml version="1.0" encoding="utf-8" ?> 
<BocReferenceValue>
  <Class>
    <remarks>
      <list type="table">
        <listheader>
          <term>State</term>
          <description>Behaviour</description>
        </listheader>
        <item>
          <term>
            Read-Only / <see cref="Value"/> is not <see langword="null"/>
          </term>
          <description>
            Displays the <see cref="IBusinessObjectWithIdentity.DisplayName"/> 
            for <see cref="Value"/> 
            and the icon returned by <see cref="IBusinessObjectWebUIService.GetIcon"/>, 
            if <see cref="EnableIcon"/> is <see langword="true"/>.
          </description>
        </item>
        <item>
          <term>
            Read-Only / <see cref="Value"/> is <see langword="null"/>
          </term>
          <description>
            Displays no text
            and the spacer returned by <see cref="IBusinessObjectWebUIService.GetIcon"/>, 
            if <see cref="EnableIcon"/> is <see langword="true"/>.
          </description>
        </item>
        <item>
          <term>
            Edit Mode / <see cref="Value"/> is not <see langword="null"/>
          </term>
          <description>
            Text is automatically provided by the <see cref="DropDownList"/>.
            Updates the icon using <see cref="IBusinessObjectWebUIService.GetIcon"/>, 
            if <see cref="EnableIcon"/> is <see langword="true"/>.
          </description>
        </item>
        <item>
          <term>
            Edit Mode / <see cref="Value"/> is <see langword="null"/>
          </term>
          <description>
            <para>
              Text is automatically provided by the <see cref="DropDownList"/>.
              Updates the icon using <see cref="IBusinessObjectWebUIService.GetIcon"/>, 
              if <see cref="EnableIcon"/> is <see langword="true"/>.
            </para><para>
              If the control is required, the undefined item is removed, once a valid item is
              selected.
            </para>
          </description>
        </item>
        <item>
          <term>
            Modifiable / <see cref="Value"/> is set to an item not in the list.
          </term>
          <description>
            <para>
              The new item is added to the list and displayed in the <see cref="DropDownList"/>. 
            </para><para>
              If <see cref="Value"/> is null but the control is required, the undefined item is
              added to the <see cref="DropDownList"/> unitl the selection is again changed to a
              valid item.
            </para>
          </description>
        </item>
      </list>
      <para>
        If <see cref="IBusinessObjectBoundControl.DataSource"/> and 
        <see cref="IBusinessObjectBoundControl.PropertyIdentifier"/> are not set, the 
        control is unbound. In that case, <see cref="Property"/> must be set programmatically and
        <see cref="Value"/> must be set to display the current item and queried to save it back 
        into the <see cref="IBusinessObject"/>.
      </para><para>
        If no <see cref="Select"/> statement is provided, use <see cref="SetBusinessObjectList"/>
        to fill the list of <see cref="IBusinessObjectWithIdentity"/> objects.
      </para>
    </remarks>
  </Class>
  <LoadPostData>
    <remarks>
      <para>
        Sets the new value and the <see cref="IsDirty"/> flag if the value has changed.
      </para><para>
        Evaluates the value of the <see cref="DropDownList"/>.
      </para>
      <note type="inheritinfo">
        Overrive this method to change the way a data change is detected of the value is read from the 
        <paramref name="postCollection"/>.
      </note>
    </remarks>
    <param name="postDataKey"> The key identifier for this control. </param>
    <param name="postCollection"> The collection of all incoming name values.  </param>
    <returns>
      <see langword="true"/> if the server control's state changes as a result of the post back; 
      otherwise <see langword="false"/>.
    </returns>
  </LoadPostData>
  <LoadValue>
    <remarks>
      <para>
        Loads the <see cref="Value"/> from the <see cref="BusinessObjectBoundWebControl.DataSource"/> 
        if <paramref name="interim"/> is <see langword="false"/>. 
      </para><para>
        Requires a <see cref="Property"/>, a <see cref="BusinessObjectBoundWebControl.DataSource"/> and 
        a <see cref="BusinessObjectDataSourceControl.BusinessObject">DataSource.BusinessObject</see>.
      </para>
    </remarks>
  </LoadValue>
  <SaveValue>
    <remarks>
      <para>
        Saves the <see cref="Value"/> into the <see cref="BusinessObjectBoundWebControl.DataSource"/> 
        if <paramref name="interim"/> is <see langword="false"/> and the control's 
        <see cref="BusinessObjectBoundModifiableWebControl.IsReadOnly"/> property evaluates <see langword="false"/>. 
      </para><para>
        Requires a <see cref="Property"/>, a <see cref="BusinessObjectBoundWebControl.DataSource"/> and 
        a <see cref="BusinessObjectDataSourceControl.BusinessObject">DataSource.BusinessObject</see>.
      </para>
    </remarks>
  </SaveValue>
  <CreateValidators>
    <remarks>
      Generates a <see cref="CompareValidator"/> checking that the selected item is not the null-item if the 
      control is in edit mode and input is required.
    </remarks>
  </CreateValidators>
  <GetOptionsMenuItemsForPreviousLifeCycle>
    <remarks>
      <para>
        The method is called with the original list of menu items, which can then be modified by an overridden
        version. The base method does not have to be called by the override. This approach was chosen because
        the base method is not necessarily able to get the original list of menu items on its own.
      </para><para>
        The <see cref="BocMenuItem"/> objects displayed during the last page life cycle are required 
        to correctly handle the events raised on the <see cref="BocReferenceValue"/>'s <b>OptionsMenu</b>.
      </para>
      <note>
        Make the method <c>protected virtual</c> should this feature be ever required and change the 
        method's body to return the passed <c>menuItems</c>.
      </note>
      <note type="inheritinfo">
        Override this method to modify the menu items displayed in the <see cref="BocReferenceValue"/>'s
        <b>OptionsMenu</b> during the previous page life cycle.
      </note>
    </remarks>
    <param name="menuItems"> 
      The <see cref="BocMenuItem"/> array containing the menu items available in the options menu. 
    </param>
    <returns> The <see cref="BocMenuItem"/> array after it has been modified by this method or it's override. </returns>
  </GetOptionsMenuItemsForPreviousLifeCycle>
  <GetOptionsMenuItems>
    <remarks>
      <para>
        The method is called with the original list of menu items, which can then be modified by an overridden
        version. The base method does not have to be called by the override. This approach was chosen because
        the base method is not necessarily able to get the original list of menu items on its own.
      </para>
      <note type="inheritinfo">
        Override this method to modify the menu items displayed in the <see cref="BocReferenceValue"/>'s
        <b>OptionsMenu</b> during the current page life cycle.
      </note>
    </remarks>
    <param name="menuItems"> 
      The <see cref="BocMenuItem"/> array containing the menu items available in the options menu. 
    </param>
    <returns> The <see cref="BocMenuItem"/> array after it has been modified by this method or it's override. </returns>
  </GetOptionsMenuItems>
</BocReferenceValue>