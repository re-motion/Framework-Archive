1.3.16
======
- Rubicon.Web.Configuration.ResourceConfiguration
  * Property RootMode aus der Config Section entfernt.
  
- Rubicon.Web.ExecutionEngine.WxeContext
  * GetPath und GetResumePath haben keinen "absolute" Parameter mehr. Der Pfad ist immer absolut.
  
- Rubicon.Web.ExecutionEngine.WxeHandler
  * Die WXE lässt sich nicht mehr mit extern definierten einem FunctionToken initialisieren.
  
1.3.11
======
- Rubicon.Web.Configuration.WcagConfiguration
  * Property Debug abgeändert zu Debugging vom Typ WcagDebugMode.

- Rubicon.Web.Utilities.WcagUtility zu Rubicon.Web.UI.WcagHelper umgebaut.

- Rubicon.Web.ExecutionEngine.WxePage
  * Bugfix: AbortConfirmationMessage konnte nicht im Projekt überschrieben werden.
  
1.3.8
=====
- WxeTransactedFunctionBase
  * Neue Klasse, Method Template für eine WxeFunction mit WxeTransactionBase
  * Bietet Events und virtuelle Methoden für vor und nach Commit und RollBack
  
1.3.7
=====
- Execution Engine
  * Bugfix: Function Abort hat im IE utner Umständen nicht korrekt funktioniert:
    Concurrency Issues beim Reuqest absetzen
    Neue Implementierung benötigt aktiviertes ActiveX im IE, ansonsten Fallback auf vorherige Lösung.
- Rubicon.Web.ExecutionEngine.WxeTransactionBase
  * Bugfix: Beim Aborting außerhalb des Execution-Cycles (dh durch einen Abort Request) steht nun die korrekte
    CurrentTransaction bereit.
    
1.3.6
=====
- Rubicon.Web.ExecutionEngine.WxeTransactionBase
  * Neue Events für vor und nach Commit und RollBack

1.3.5
=====
- Rubicon.Web.UI.Controls.WebButton hatte einen Bug im WCAG Debugging Modus.
- Web Configuration Doku überarbeitet.

1.3.3
=====
- ResourceDispatching:
  * Globale Resourcen verwenden nun das Prefix "$res:" statt "#res:" um Verwechslungen mit der ASP.net DataBinding
    Syntax zu vermeiden.

1.3.2
=====
- Rubicon.Web.ExecutionEngine.WxePage
  * RegisterClientSideEventHandler: Neue Methode mit der man clientseitige Eventshandler registrieren kann.
    Derzeit vorhanden für OnLoad, OnPostBack und OnAbort.

- Rubicon.Web.UI.Controls.DropDownMenu      
  * CSS-Klassen dropDownMenuHeadTitle und dropDownMenuHeadButton sind explizit für td definiert.
  * Das DropDownMenu verwendet explizit Weiß als Hintergrundfarbe.
  
1.3.1
=====
- Rubicon.Web.UI.Controls.EmailAddressValidator
  * Validator Control für Email-Adressen

- Rubicon.Web.ExecutionEngine.WxeContext
  * FunctionToken: Set-Accessor entfernt. Nur noch via Konstruktor setzbar.

- Rubicon.Web.ExecutionEngine.WxeHandler
  * CurrentFunction zu RootFunction umbenannt.
  
- Rubicon.Web.ExecutionEngine.WxePageStep
  * Bugfix: Die gerade executed Function wurde nicht aborted, wenn der Step aborted wurde.

- Rubicon.Web.ExecutionEngine.WxePage
  * ExecuteFunction und ExecuteFunctionNoRepost testen nun, dass der Sender IPostBackDataHandler oder 
    IPostBackDataHandler implementieren. Damit wird verhindert dass Pages oder UserControls (bzw andere 
    inkompatible Controls) irrtümlich als Sender verwendet werden.
    Dieses Verhalten gilt nur, wenn ExecuteFunction bzw ExecuteFunctionNoRepost von einem Event Handler aus 
    aufgerufen werden.
    
- Rubicon.Web.ExecutionEngine.WxeStep
  * ParentStep Set-Accessor in SetParentStep-Methode umgeschrieben.

- Rubicon.Web.ExecutionEngine.WxeStepList bzw WxeFunction
  * Static Fields sind nicht mehr erlaubt für Steps.
  
- Execution Engine Steps allegemein:
  * Field und Method Steps sind nun auf Non-Public, Instance und Declared-Only beschränkt.
  * Class Steps sind auf Non-Public und Declared-Only beschränkt.
  
- Rubicon.Web.UI.Controls.WebButton
  * Bugfix: In Zusammenarbeit  mit WxePage.ExecuteFunctionNoRepost wurden trotzdem Events ausgelöst, 
    unter Umständen auch beim falschen WebButton.
  * Wird der WebButton im normalen Modeus betrieben (dh UserLegacyButton=false bzw nicht WAI konform),
    so ist für das korrekte Verhalten zwingend aktiviertes Javascript erforderlich. Andernfalls gäbe es 
    Inkompatibilitäten mit der WXE.

- Resources Configuration Section
  * RelativeToApplicationRoot ersetzt durch Enum RootMode. 
    Defaultverhalten bleibt identisch

- WAI Configuration Section
  * Bugfix: Die Config-Section hatte einen Bug, wodurch das Conformance-Level nicht ausgewertet wurde.
 
1.2.71
======
- WxeHandler
  * Bugfix: Wurde die Refresh bzw Abort WxeAction nicht via QueryString übergeben, wurde sie nicht ausgewertet.
    Auswirkungen in der Praxis: keine

1.2.68
======
- ResourceDispatching
  * Bugfix: gab es in der Seite keine Resourcen so warf der WebButton und der WebTreeView eine ArgumentNullException.
    Aufgetreten mit 1.2.67.
    
- Execution Engine
  * Der Function Token wird nun nicht mehr als Query String übergeben bei einem PostBack sondern mittels HiddenField. 
  
- WxePage
  * Neue Property EnableSmartFocusing/IsSmartFocusingEnabled um seitenspezifisch das wiederherstellen des Focus   
    zu deaktivieren (Default: true)
  * Neue Property EnableSmartScrollinging/IsSmartScrollingEnabled um seitenspezifisch das wiederherstellen der
    ScrollPosition zu deaktivieren (Default: true)
  * Neue Methode SetFocus zum setzen des zu fokusierenden Controls.

- Smart Navigation
  * Stellt die ScrollPostionen und den Focus wieder her.
  * Neuer Bereich in der Rubicon.Web Config: SmartNavigation
  * Standardmäßig aktivert.

1.2.67
======
- ResourceDispatching aus 1.2.66 überarbeitet.
  * Globale Resourcen verwenden nun das Prefix "#res:" bei der Angabe in der Property.
    Im Resource-File werden sie ohne Prefix eingetragen.
  * "auto:" Resourcen wie gehabt.

1.2.66
======
- Rubicon.Web.UI.Globalization.ResourceDispatcher
  * Neues Feautere: Resourcen können nun global definiert werden
    "global:ResourceID" definiert eine resource ID.
    Die resource ID inkl. "global:" kann in String Properties von Controls eingetragen werden und während dem 
      Dispatching werden die entsprechenden globalen Resourcen zugewiesen. 
    Globale Resouren werden vor den automatischen (auto:) Resourcen zugewiesen und können von diesen überschrieben
      werden.
    Verwendung für identische Resource-Strings auf mehreren Seiten oder bei mehreren Controls auf einer Seite,
      zB für Validator-Meldungen.

1.2.65
======
- Execution Engine
  * Function States werden nun automatisch aborted wenn sie zu Ende sind:
    (Root-)Functions welche über FunctionType initialisiert wurden, werden am Ende des Execute-Cycles aborted.
    Root-Functions welche durch WxePageInfo.Execute (ReturningPostback=true) gestartet wurden, 
      werden im Page_Unload aborted, d.h. nachdem sie den Returning Postback Zweig durchlaufen haben.
    Root-Functions welche durch WxePageInfo.Execute (ReturningPostback=false) gestartet wurden, 
      werden am Ende des Execute-Cycles aborted.
        
1.2.64
======
- Execution Engine
  * Unterstützt nun Session Management: 
    automatisches Session-Refresh solange das Browser-Fenster offen ist.
    Session-Abort (Mit Sicherheitsabfrage) wenn das Browser-Fenster geschlossen wird oder der User wegnavigiert.  

- Rubicon.Web.ExecutionEngine.WxeHandler
  * WxeAction Argument 'cancel' zu 'Abort' umbenannt.
  * Neues WxeAction Argument 'Refresh'.

- WxePage
  * Neue Property EnableAbort/IsAbortEnabled um seitenspezifisch den Sessionabbruch einzustellen (Default: true)
  * Neue Property EnableAbortConfirmation/IsAbortConfirmationEnabled um seitenspezifisch den Abbruchdialog zu 
    aktivieren (Default: false)
  * Benötigt nun Resourcen und den HtmlHeadContents
  
- Execution Engine Configuration
  * Neue Optionen: EnableSessionManagement und RefreshInterval

- WebTreeView
  * Neue Property: EnableLookAheadEvaluation
    Ist das Flag gesetzt, so wertet der Tree auch die ChildNodes aus -> Node-Expander (+) werden korrekt angezeigt
      
1.2.62
======
- Rubicon.Web.UI.Globalization.ResourceManagerUtility.GetResoureManager
  * Resource Manager werden nun gecached.
  
1.2.61
======
- Rubicon.Web.ExecutionEngine.WxeLauncher
  * Neue Klasse
  * Ermöglicht einen redirected Aufruf des WxeHandlers. Das ist notwendig, wenn der Link auf eine WxeFunction
    zB aus MS Word aufgerufen wird. Ms Word schluckt die Sessioninformationen, wodurch nachfolgende Postbacks 
    keine Sessioninformationen mehr haben, und somit ins Leere gehen.
  * \Res\UI\WxeLauncher.ashx muss in das Application Root Direcotry kopiert werden.

1.2.60
======
- Wai Configuration
  * WAI zu WCAG korrigiert
  * Property Level umbenannt zu ConformanceLevel.
  * Enum WaiLevel umbenannt zu WaiConformanceLevel.

- DatePicker
  * Positionierung umgestellt: DatePicker erkennt nun, wenn zu wenig Platz ist und rendert sich vor statt 
    nach dem Button

1.2.57
======
- Wai Configuration
  * Neuer Eintrag in der Rubicon.Web.Configuration.WebConfiguration Section: wai
  * WaiConfiguration.Level definiert das gewüschte WAI-Level.
  * WaiConfiguration.Debug aktiviert Exceptions (WaiException) wenn eine Einstellung auf der Seite 
    nicht WAI-konform ist. Nur non-legacy Controls bieten diese Option.

- Resources Configuration
  * Neuer Eintrag in der Rubicon.Web.Configuration.WebConfiguration Section: resources
  * ResourcesConfiguration.Root definiert den Root-Folder für alle durch den ResourceUrlResolver aufgelösten Resourcen.
  * ResourcesConfiguration.RelativeToApplicationRoot spezifiziert ob die Resource-Root mit dem App-Dir geprefixed wird.
  
- WebButton
  * Default Class für den Web-Button von Button auf webButton geändert.
  * Ist WAI-Level A definiert, rendert der WebButton ein "input" Element vom Typ "button" 
    anstelle des "button" Elements. Icons und HTML-Tags innerhalb des Buttons sind dann deaktiviert.
  
- Styles
  * Die Standardschriftgröße wurde auf die Basisgröße 80% des Browser-Defaults abgeändert.
    Diese Änderung wird von allen Projekten welche Style.css einbindnen automatisch übernommen.
    Wird 100% gewünscht, so kann die 1. Zeile von Style.css (@import url("fontSize080Quirks.css");) entfernt werden.
    Alternativ kann fontSize100Quirks.css im anschluss an Style.css eingebunden werden.
  
- ResourceUrlResolver
  * Bugfix: Es konnten keine Resource-Pfade aufgelöst werden für Applikationen die direkt im Rootverzeichnis der
    WebSite deployed sind.
  
1.2.55
======
- WebTab
  * Obsolete TabID entfernt. Muss durch Search auf die ASPX-Files manuell herausgelöscht werden.
      ACHTUNG: Kein Kompilerfehler. Probleme nur im VS Designer bzw als Exception auf der gerenderten Seite sichtbar.

- WebTreeNode
  * Obsolete NodeID entfernt. Muss durch Search auf die ASPX-Files manuell herausgelöscht werden.
      ACHTUNG: Kein Kompilerfehler. Probleme nur im VS Designer bzw als Exception auf der gerenderten Seite sichtbar.

- HtmlHeadAppender
  * Bugfix: Die Sortierung der Einträge war nicht garantiert. Vielmehr sind nur durch Zufall die durch die
      Page hinzigefügten Elemente am Ende der Liste gerendert worden. Für Stylesheets ist dieses Verhalten kritisch,
      da diese in der Reihenfolge ihres auftretens auf der Seite ausgewertet werden.
    Neuer Parameter für die RegisterXXX Methoden: Priority mit den Werten Library, UserControl und Page.
    Wird kein Wert angegeben, so wird Page als Default genommen. Damit ist das korrekte Verhalten für bestehenden 
      Lösungen sichergestellt, welche HeadElemente in der Page hinzufügen. 
      Konkreter Fall: Das Überschreiben von StyleSheetwerten der Control-Libraries
    
1.2.54
======
- FormGridManager
  * Bugfix: Wird der FormGridManager in eine htmlTable eingebettet die er selbst managed, geht der ViewState verloren.
    Diese Konstellation wirft nun eine Exception.
  
1.2.53
======
- NumericValidator
  * Neue Klasse. Validator für Integer, Double und Decimal Werte. Verwendet im Gegensatz zu CompareValidator
    die Parse Methode um die Gültigkeit zu testen.
    
1.2.52
======
- IControlItem
  * ID zu ItemID umbenannt.
  
- WebTab
  * TabID zu ItemID umbennant (Designer-Property).
    Durch Obsolete abgefangene Änderung, alte Version wird in einigen Wochen entfernt.

- WebTreeNode
  * NodeID zu ItemID umbennant (Designer-Property).
    Durch Obsolete abgefangene Änderung, alte Version wird in einigen Wochen entfernt.
  
- WebMenuItem
  * Explizite Interfaceimplentierung IControlItem.ID entfernt.  
    
- TabbedMultiView
  * Bugfix: Wurde die Seite mittels WXE-Aufruf verlassen, so war bei der Rückkehr stets der erste Tab ausgewählt, 
    während die korrekte Seite angezeigt wurde.
    
1.2.50
======
- TabbedMultiView
  * Tabs können nun mittels TabbedMultiView.Views.Remove (...) bzw TabbedMultiView.Viws.RemoveAt (...) entfernt werden.

- WebButton
  * Button wird disabled sobald geklickt und eventuelle client-seitige Validierung erfolgreich.
    
1.2.49
======
- Fix: Fehlende Resource WebConfiguration.xsd in Assembly hinzugefügt (build script fehler)

1.2.48
======
- Fix: ViewState wird nun auch vor ExecuteFunction() korrekt gespeichert.
- Neu: Config-Eintrag um ViewState in Session abzuschalten (s. config-Schema)

1.2.47
======
- Der ViewState von WxePage wird in der Session abgelegt (genauer gesagt im WxePageStep).
  Angenehmer Nebeneffekt: Änderungen des ViewState im gleichen Request wie ExecuteFunction
  werden nicht mehr (wie bisher) verworfen.
  
1.2.45
======
- neu: IWxePage.ExecuteFunction hat optionalen Parameter "features" (siehe javascript window.open, 
    zB "location=no,toolbar=no")

1.2.41
======
- TabbedMultiView
  * Bugfix: Unter folgender Bedingung wurde der falsche Tabreiter aber der richtge View angezeigt:
    Programmatisches Setzen des Views ohne das vorher der noch selektierte Tab abgefragt wurde.

1.2.39
======
- TabbedMultiView
  * Bugfix: Horizontales Scrollen wurde durch die Seite statt durch den MultiView durchgeführt.
  
1.2.33
======
- FormGridManager
  * Designerdarstellung nach Art .net2.0 für non-visual Controls

- Konfiguration des Function Timeouts im .config File: 

  <configSections>
    <section name="rubicon.web" type="Rubicon.Web.Configuration.WebConfiguration, Rubicon.Web" />
  </configSections>
  
  <rubicon.web xmlns="http://www.rubicon-it.com/commons/web/configuration">
    <executionEngine functionTimeout="30" />
  </rubicon.web>

1.2.25
======

Exception Handling in WxeFunctions (neu)
----------------------------------

  Exceptions können abgefangen werden.
  Grund: try/catch funktioniert nicht, wenn man WxeFunctions aus ASP.NET Event Handlern startet

  Beispiel: (funkt nicht)

  void Button1_Click (...)
  {
    try
    {
      if (! IsReturningPostBack)
      {
        MyFunction f = new MyFunction (...);
        ExecuteFunction (f);
      }
      else
      {
        MyFunction f = ReturningFunction;
        ...
      }
    }
    catch (Exception e)
    {
      // catch code
      ... 
    }
  }

  (Grund: MyFunction wird großteils nicht im Kontext von Button1_Click ausgeführt, d.h. Button1_Click ist nicht am Call Stack)

  Folgendes funktioniert ab sofort:

  void Button1_Click (...)
  {
    if (! IsReturningPostBack)
    {
      MyFunction f = new MyFunction (...);
      f.CatchExceptions = true; 
		  // Alternative für bestimmte Exception-Types: 
		  // f.SetCatchExceptionTypes (typeof (ArgumentException), ...);
      ExecuteFunction (f);
    }
    else
    {
      MyFunction f = ReturningFunction;
      if (f.Exception != null)
      {
        // catch code
        ...

        // beispiel: rethrow 
        throw f.Exception;
        // beispiel: neue exception
        throw new InvalidOperationException ("So gehts nicht!", f.Exception);
      }
    }
  }


Konstruktoren für WxeFunctions (Konvention)
------------------------------

  Jede WXE Function benötigt folgende Konstruktoren:

  Default Konstruktor - wird z.B. verwendet, um eine Funktion via URL oder aus einer BocList zu starten:

    public MyFunction ()
    {
    }

  Untypisierter Konstruktor - wird verwendet, um eine Funktion via "new MyFunction(...)" zu starten

    public MyFunction(params object[] args)
      : base (args)
    {
    }

  Typisierter Konstruktor - ist nur für IntelliSense notwendig. 
  Konvention: Die Parameter im Konstruktor heissen GENAU SO wie die [WxeParameter] Properties. (inkl. Groß/Kleinschreibung)

  Hier sind 2 Fälle zu unterscheiden:
  a) Nur In-Parameter: Dieser Konstruktor wird tatsächlich aufgerufen, wenn keine varref() Argumente verwendet werden.

    public MyFunction (CnObject Object, CnObject Action, CnObject AttributeDefinition)
      : base (Object, Action, AttributeDefinition)
    {
    }

  b) Mindestens ein Out- oder InOut-Parameter: Wenn dieser Konstruktor aufgerufen wird, dann hat jemand einen Fehler gemacht. 
    Also wirklich NUR für IntelliSense.

    public MyFunction (CnObject Object, CnObject Action, out CnObject Form)
    {
      throw new WxeOutParameterNotSupportedException();
    }


1.2.19.0
========

- LengthValidator
  * Überarbeitet. Altes Verhalten (-1 für nicht validieren) beibehalten.
  * Check für nur TextBox entfernt.
  
1.2.13.0
========

- FormGridManager
  * BugFix für Version 1.2.12.0: Das Table-Tag für die FormGrids wurde doppelt gerendert.
  
- TabbedMultiView
  * Neue Klasse
  * Bietet eine Verschmelzung von WebTabStrip und MultiPage
  
- WebTabStrip
  * Neue Klasse
  * Bietet einen mehrzeiligen TabStrip
  
1.2.12.0
========

- FormGridManager
  * ASP.net 2.0 kompatibel
  
1.2.11.0
========

- Rubicon.Web.Utilities.ControlHelper
  * LoadViewStateRecursive: neue Methode, ruft Control.LoadViewStateRecursive auf.
  * SaveViewStateRecursive: neue Methode, ruft Control.SaveViewStateRecursive auf.
  * ViewState, EventTarget, EventArgument: Properties welche die .net IDs für die HiddenFields enthalten.
  
- WxePage, WxepageStep
  * Verwenden nun die Properties ControlHelper.ViewState, ControlHelper.EventTarget und ControlHelper.EventArgument
    statt hertcodierter Strings.

1.2.10.0
========

- Rubicon.Web.UI.Controls.WebButton
  * Erweitert: WebButton unterstützt nun mehrere unabhängige WebButtons auf einer Seite, 
    mit getrennten OnClick Event-Handlern.
    .net 1.1 kann reguläre System.Web.UI.WebControl.Buttons nicht mit getrennten OnClick-Events fahren. 
    Es wird immer das OnClick Event für den letzten Button in der Collection ausgelöst, 
    da Buttons auch PostData enthalten.

- FormGridManager, ValidationStateViewer
  * Lokaliserung der Resourcen für Deutsch.
    
1.2.7.0
=======

- Rubicon.Web.UI.Controls.WebButton
  * Erweitert: WebButton zeigt den Accesskey unterstrichen an.
  * Erweitert: WebButton bietet zusästzlich zum Text ein Icon an.
  Im Config-File ergänzen:
  <configuration>
    <system.web>
      <pages validateRequest="false" />
    </system.web>
  </configuration>
  
- TabControl:
  * 2 neue Properties "SelectedTab" und "SelectedMenu"

1.2.6.0
=======

- Rubicon.Web.UI.Controls.WebLinkButton
  * Neue Klasse
  * Bietet einen AccessKey-Aware LinkButton an.
    Der AccessKey kann direkt in den Text codiert werden mittels des Prefixes '&'.
   
- Rubicon.Web.UI.Controls.FormGridManager
  * Die Erkennung der verschiedenen Row-Typen wurde rubuster gestaltet. 
  * Es werden die folgenden Typen erkannt:
    TitleRow: 
	    Genau 1 Zelle in der ersten Zeile.
    SubTitleRow (neu): 
	    Genau 1 Zelle in einer Zeile.
    Einzeilige DataRow: 
	    Befüllte Controls-Collection in der durch ControlsColumn identifizierten Zelle.
    Zweizeilige DataRow: 
	    Leere Controls-Collection in der per ControlsColumn identifizierten Zelle
	    und daran anschließend noch eine Zeile mit zumindest einer Zelle in der LabelsColumn
    UnknownRow:
	    Alles was sich nicht identifizieren lässt.
	    Einzige Formattierung durch den FormGridManager: der Colspan wird angepasst wenn in den anderen Rows
	    durch den FormGridManager Spalten eingefügt werden (Marker-Spalte, Validator-Message-Spalte).
 
1.2.5.0
=======

- Rubicon.Web.UI.Controls.WebButton
  * Neue Klasse
  * Bietet einen AccessKey-Aware Button an.
    Der AccessKey kann direkt in den Text codiert werden mittels des Prefixes '&'.
    
1.1.46.0
========

- Rubicon.Web.UI.Controls.WebTreeView
  * Neue Klasse
  * Bietet einen TreeView (kein ClientSide Script).
  * Nodes können On-Demand befüllt werden.

1.1.45.0
========

- Rubicon.Web.UI.Controls.MenuItem
  * Umbenannt zu WebMenuItem

- Rubicon.Web.UI.Controls.MenuItemClickEventHandler
  * Umbenannt zu WebMenuItemClickEventHandler

- Rubicon.Web.UI.Controls.MenuItemClickEventArgs
  * Umbenannt zu WebMenuItemClickEventArgs

1.1.40.0
========

- ValidationStateViewer
  * BugFix: ValidationStateViewer konnte nicht mit verschachtelten Controls umgehen.
  * Neue Property: SkipNamingContainers
  * Neue Property: ShowLabels
  
- FormGridManager
  * Neue Property: SkipNamingContainers

1.1.36.0
========

- Rubicon.Web.UI.Controls.DropDownMenu
  * Neue Klasse
  * Bietet ein Menu ähnlich einer DropDownBox an.
  
1.1.32.0
========

- BugFix Rubicon.Web.UI.Controls.FormGridManager
  * Gefixed: 
    Wenn der FormGridManager eine HtmlTable managed, welche auf einem nicht angewählten Tab liegt,
    dann gab es beim Wechsel auf einen bisher nicht angezeigten Tab eine ViewStateException.

- BugFix Rubicon.Web.UI.Controls.SmartLabel
  * Gefixed:
    Exception wenn ForControl nicht gesetzt wurde. Neues Verhalten: Default Text.
    
1.1.30.0
========

- Rubicon.Web.UI.IFormGridRowProvider
  * Methoden GetHiddenRows (string) und GetAdditionalRows (string)
    Der erwartete Parameter ist jetzt der jeweiligen Table, nicht die ID.
  
1.1.26.0
========

- BugFix Form.cs:
  * Gewünschtes Verhalten: Wenn die action-Url bei einem rubicon:Form auf eine andere Seite zeigt, 
      soll der Viewstate nicht gerendert werden!!
  * Jetzt werden die Url-Parameter der action-Url beim Vergleich der aktuellen Seite und der action-Url 
    gefiltert, somit wird der ViewState bei Postbacks auf die eigene Seite gerendert. 
    (Bisher ergab der Vergleich immer false, da die Url-Parameter nur auf einer Seite berücksichtigt wurden)
    
- Rubicon.Web.UI.HtmlHeadAppender
  * Neue Klasse
  * Bietet die Möglichkeit, Elemente in den HTML Head einzuhängen.
  * Registrieren: HtmlHeadAppender.Current.Register...(key, ...)
  * Die registierten Elemente werden mit Hilfe des Controls HtmlHeadContents gerendert.
  * Sämtliche Elemente müssen vor Begin der Render-Phase registriert werden.

- Rubicon.Web.UI.Controls.HtmlHeadContents
  * Neue Klasse
  * Rendered die Elemente, welche über den HtmlHeadAppender registriert wurden.
  * Verwendung: HtmlHeadContents wird als Servercontrol in den HTML Head der ASPX-Seite eingefügt:
    <{0}:HtmlHeadContents runat="server" id="HtmlHeadContents"></{0}:HtmlHeadContents>
    
1.1.24.0
========

- PageUtility
  * Neue Methode RegisterClientScriptInclude
  * Neue Methode RegisterStartupScriptBlock
  
- Methode GetResourceUrl der Klasse ResourceUrlResolver: Signatur geändert.

- UI.Controls.DatePickerPage
  * Neue Klasse
  * Bietet zusammen mit Res\UI\DatePickerForm.aspx und Res\Html\DatePicker.js einen Kalender
    als IFrame an.
  * Aufruf über die Funktion ShowDatePicker in DatePicker.js.
  
- UI.Controls.FormGridRowPrototype
  * Umbenannt zu FormGridRowInfo

- UI.Controls.FormGridRowPrototypeCollection
  * Umbenannt zu FormGridRowInfoCollection
 
- Utitilies.AccessKeyUtility
  * FormatAccessKey (...) Methoden nach UI.Controls.SmartLabel verschoben.
  
- UI.Controls.FormGridRowProvider
  * gelöscht
  * Rubicon.Collections.AutoInitHashtable um die Funktionalität der 
    Get...(string) Methoden nachzubauen
 
1.1.21.0
========

- UIUtility:
  * "internal sealed class UIUtility" in "public class ImageUtility" umbenannt
  * Neue Methode "GetErrorImageUrl"

- EntryFormGrid.cs:
  * Neues property "EntryFormGrid" bei Klasse "EntryTitle"
  * Methode "Render" bei Klasse "EntryField":
    Ab Version 3.1.7.0 wurde die Table-Column mit dem Label nur gerendert wenn LabelColumnWidth ungleich 0;
    Ab der aktuellen Version wird die Table-Column mit dem Label nur gerendert 
      wenn LabelColumnWidth ungleich 0 oder der Text des Labels ungleich Leerstring; 
    Einschränkung: Wenn in einem EntryFormGrid mit LabelColumnWidth = 0 oder nicht gesetzt EntryFields nicht alle keinen Text 
      oder alle einen Text haben, dann werden die EntryFields versetzt ausgegeben!!
  
- ViewControl.cs:
  * Neue Methoden "GetWhitespaceImage" und "GetImagePath" bei Klasse "ViewControl"

1.1.18.0
========

- NavigablePage
  * ClearGlobalSessionValue -> Funktioniert jetzt analog zu Set- und GetGlobalSessionValue 
      ohne UniqueKey (PageToken) 
- Utilities.HtmlUtility
  * HtmlEncode überladen: HtmlEncode (string,HttpWriter)
      schreibt encoded string direkt auf den HttpWriter
- Form
  * Page_RenderPostBackScript -> Die ControlID für das Eventtarget wird jetzt 
      mit ':' als Separator für Control-Hierarchien statt '_' gesetzt 
      (Events in UserControls funktionieren wieder)

1.1.14.0
========
- Neues Interface: IResourceUrlResolver
    Löst IImageUrlResolver und IHelpUrlResolver ab.
    
- Klasse ResourceUrlResolver
    Methoden GetImageUrl und GetHelpUrl durch GetResourceUrl ersetzt.
    
3.2.0.0
=======

- Moved von Rubicon nach Commons.
    
- Controls - Form-Grid:
  * Neue Implementierung des EntryFormGrid-Funktionalität
    Form-Grids können nun im Designer via Drag'n'Drop erstellt werden.
  * Siehe Doku: FormGridManager.doc
  * Besteht aus:
    FormGridManager:
      Zuständig für die Formatierung einer oder mehrerer HTML-Tables als Form-Grids.
      Zuständig für das automatische Hinzufügen fehlender Komponeneten
      Zuständig für eine Form-Grid-weite Validierung
      Enthällt dieSub-Klassen
        FormGrid, FormGridRow, FormGridRowCollection und ReadOnlyHtmlTableRowCollection.
    IFormGridRowProvider:
      Kann in einem Parent-Control des FormGridManager implementiert werden.
      Stellt dem FormGridManager neue Zeilen bzw zu entfernende Zeilen zur Verfügung.
    FormGridRowProvider:
      Implementierungshilfe
      Kapselt die Funktionalität des IFormGridRowProvider Interfaces
    FormGridRowPrototype, FormGridRowPrototypeCollection:
      Wrapper-Klasse und zugehörige Liste um zur Laufzeit erstellte Zeilen in das Form-Grid
      einzufügen.
    ValidationError:
      Wrapper-Klasse für einen Validierungsfehler
   
- Controls.IImageUrlResolver, Controls.IHelpUrlResolver:
  * Wird implementiert falls das jeweilige Control einem Child-Control 
    (ins besondere dem FormGridManager) den Pfad zu Bildern oder Hilfe-Texten zur Verfügung stellen
    soll.

- Controls.ISmartControl:
  * Definiert die Bereitstellung sämlticher Informationen die benötigt werden, damit ein Control
    durch simples Drag'n'Drop in das Form-Grid integriert werden kann.
  * Definiert die Bereitstellung von: 
      Validatoren, Label, Hilfe, Input-Required Flag
  
- Controls.ValidationStateViewer:
  * Zubau für den FormGridManager
  * Liest sämtliche FormGridManager der Page aus und
      ermöglicht deren Validierung.
      die gruppierte Anzeige der Validierungsfehler.
  
- Globalization.ResourceDispatcher:
  * Überarbeitet um das unter Rubicon.Globalization implementierte IResourceManager Interface
    zu unterstützen.
  * Methoden, die noch direkt den FCL ResourceManager unterstützen, sind als obsolete
    gekennzeichnet.
  * Ergänzt um verschiedene public Methoden,
    um Teilfunktionialität nach außen zur Verfügung zu stellen.
  * Fehlerhafte Resourcenangaben werden mit Hilfe von log4net geloggt.
  * Abwärtskompatibilität ist gewährt (vorbehaltlich Bugs)

- Utilities.AccessKeyUtility:
  * Hinzugefügt
  * AccesskeyUtility.FormatLabelText (...)
    Methode zum Parsen von Strings mit AccessKey-Syntax (&), highlighten des Keys und Rückgabe des 
    Chars der als Key verwendet wird.
  * AccesskeyUtility.RemoveAccessKey (...)
    Methode um die AccessKey-Syntax aus einem String zu entfernen.
    
- Utilities.UrlResolverUtility
  * Sucht die Control-Hierarchie nach implementierungen von Controls.IImageUrlResolver, bzw
    Controls.IHelpUrlResolver ab und kapselt die Abfrage der jeweiligen Interface-Methode.
    
- log4net
  * Die Binary für log4net 1.2beta wurde in the References aufgenommen.

3.1.8.0
=======

- PageUtility.RegisterWindowOpenJavascript (): Javascript-Methode "Refresh ()" ist nur unter speziellen Umständen
  vorhanden => Wenn keine "Refresh ()" Methode vorhanden ist, dann wird das erste Form auf der Seite submitted =>
  Achtung: In diesem Fall sollte die Page.Validate () Methode überschrieben werden, da bei einem Submit ohne
  Quellcontrol die Page im Normalfall automatisch validiert!
- Neue Methode StandardUserControl.ClearSessionValue () zum Entfernen von Session-Einträgen => 
  Nun auch für Controls verfügbar. 
    
    
3.1.7.1
=======

- Bugfix in StandardButton: OnClick Event MUSS im OnPreRender überschrieben und nicht 
  aneinandergehängt werden, da ansonsten gesamtes OnClick immer wieder wiederholt wird 
  => Das daraus resultierende Verhalten im IE führt dazu, dass die Postbacks nicht
  mehr korrekt funktionieren => Rubicon.Web.UI Build 3.1.7.0 NICHT verwenden.
  

3.1.7.0
=======

- EntryFieldBreak und EntryTitle können jetzt auch in einem ViewControl platziert werden =>
  Property EntryFormGrid in beiden entfernt. Dafür private property ImagePath eingeführt.
- Methoden für das Handling von Images von EntryFormGrid in UIUtility ausgelagert.
- Neue Methode UrlUtility.Combine (...): Fügt 2 Webpfade zusammen. 
- Neues Servercontrol "CurrencyTextBox":
  * Rendert ein Währungssymbol und eine Textbox für den Betrag
  * Währungssymbol definierbar; default ""
  * Position des Währungssymbols definierbar ("BeforeTextbox", "AfterTextbox"); default "BeforeTextbox"
  * Validiert wird der Datentyp des eingegebenen Betrags, nicht aber ob leer oder nicht 
    -> im Entryfield mit RequiredFieldValidator prüfen
- Klasse "EntryField" Methode "Render": Wenn LabelColumnWidth = 0, dann werden links neben den 
    requiredfield- und invalidstate-images keine Whitespaceimages angezeigt
- Kernfunktionalität von Standardpage.CloseBrowserWindow (...) in neue Methode PageUtility.CloseBrowserWindow (...) 
  verlagert.
- Bugfix in StandardButton: Page.GetPostBackClientEvent(...) fügt nicht von selbst abschließenden ";" 
  für Javascript ein => Wird durch StandardButton erledigt.

   
3.1.6.1
=======

- Neue static Methode EntryFormGrid.GetParentEntryFormGrid (...): Gibt von einem control dessen
  EntryFormGrid auch über mehrere Hierarchieebenen zurück.

- EntryFieldBreak, EntryTitle, EntryField: Property EntryFormGrid retoruniert jetzt auch EntryFormGrid
  über mehrere Hierarchieebenen.
 

3.1.6.0
=======

- EntryFormGrid: Folgende statics zu instance members gemacht: 
  * ImagePath
  * GetImagePath (...)
  * GetWhitespaceImage (...) + Overload
  
- EntryFieldBreak: 
  * Neue property EntryFormGrid
  * Zugriff auf ehemalige statics in EntryFormGrid passiert jetzt über instance members
  * EntryFieldBreak darf nur mehr in EntryFormGrid platziert werden
  
- EntryTitle: 
  * Neue property EntryFormGrid
  * Zugriff auf ehemalige statics in EntryFormGrid passiert jetzt über instance members
  * EntryTitle darf nur mehr in EntryFormGrid platziert werden
  
- EntryField: 
  * Neue property EntryFormGrid
  * Protected property ParentGrid entfernt
  * Implementierung von Render (...) geändert => Statt cast und Abfrage auf null beim Zugriff auf EntryFormGrid
    neue property EntryFormGrid verwendet => EntryField darf nur mehr in einem EntryFormGrid platziert werden.
  * Zugriff auf ehemalige statics in EntryFormGrid passiert jetzt über instance members

  
3.1.5.0
=======

- EntryFormGrid: Neue static property "ImagePath". Wird default auf ApplicationPath + "/images" gesetzt.
  Kann jedoch von einer Applikation überschrieben werden, wenn sich die EntryFormGrid images wo anders befinden.


3.1.4.0
=======

- EntryFormGrid: GetImagePath () liefert jetzt immer das Verzeichnis "Images" im Root der Application

- Form: Neue Methode "GetPageUrlWithoutPath": Liefert Url auf aktuelle Seite ohne Pfad aber mit QueryString
    (wird hauptsächlich verwendet für das Setzen der Action-Url)

- TabControl.GetCompleteUrl (...): Statt private => protected virtual


3.1.3.0
=======

- Klasse Form: HTML 4.0 erlaubt kein name-Attribut beim Form-Tag -> name-Attribut wird nicht gerendert.

- Neue Methoden in StandardControl: 
  * CloseBrowserWindow: Overload Methode die ein Parent Refresh unterstützt
- Neue Methoden in PageUtility: 
  * RegisterClientScriptBlock: Umhüllt die JavaScript Methode mit den script Tag und
    registriert diese als eGovernment Gütesiegel konformes Skript.

3.1.2.0
=======

- StandardControl: 
  * Von StandardControl auf StandardUserControl umbenannt
  * Stellt Protected property "StandardPage" zur Verfügung.
  * Kann Session Variablen unter dem pageToken der Page speichern.
  * RegisterEventHandlers () von MultiLingualControl nach StandardUserControl verschoben.
- Neues Control StandardButton
  * Stellt Referenz auf StandardPage zur Verfügung.
  * Wird nach dem Drücken client-seitig disabled, um visuelles Feedback zu geben und zu 
    verhindern, dass Button mehrmals gedrückt wird.


3.1.1.0
=======

- Neue Methoden in PageUtility: 
  * RegisterWindowOpenJavascript: Registriert eine Javascript Methode zum Öffnen von URLs 
    in neuem Fenster optimiert für Anzeigen >= 1024x768.
  * GetWindowOpenJavascript: Gibt den Javascript Methodenaufruf zum Öffnen von URLs in 
    neuem Fenster zurück.
- Neue Methoden in StandardPage:
  * GetWindowOpenJavascriptWithRegistration: Registriert Javascript Methode zum Öffnen
    von URLs in neuem Fenster und liefert den Javascript Methodenaufruf zurück.        
  * CloseBrowserWindow: Räumt Session Variablen auf und schließt Browser Fenster. In diesem 
    Fall wird der ViewState nicht mehr in die Session geschrieben, damit kein Memory Leak
    entsteht.    
- Neues Control "StandardControl" eingeführt:
  Unterstützt aktuell den Zugriff auf Session Variablen der NavigablePage (pageToken-Handling)
- Form.cs - Methode "Page_RenderPostBackScript": Änderung der Ermittlung des Forms eines Elements,
    da z.B. Anchor-Tags kein Form-Property haben.


3.1.0.0
=======

- Rubicon.Data.TableModules unterstützt ab Version 3.1.0.0 auch Guids als ID-Spalten.
  * ExtendedDropDownList unterstützt nun ebenfalls Guids als eindeutigen Identifier =>
    Folgende Änderungen:
      SelectedValue: Datentyp ist statt "int" jetzt "string" (wie Basisklasse DropDownList)
      SelectedInt32Value: Für Listen mit Datentyp "int" als eindeutigen Identifier
      SelectedGuidValue: Für Listen mit Datentyp "Guid" als eindeutigen Identifier
      Add (...): Nimmt für Parameter "value" jetzt statt "int" ein "object"
      GetListItemByValue (...): Nimmt für Parameter "value" jetzt statt "int" ein "object"
  * In DataDropDownList wurde folgendes geändert:
      Property EmptyValue entfernt
      SelectedValue, SelectedInt32Value, SelectedGuidValue wie ExtendedDropDownList nur 
      zusätzliches Handling für Leerzeile. Bei Leerzeilen werden folgende Werte retourniert:
        SelectedValue: string.Empty
        SelectedInt32Value: -1
        SelectedGuidValue: Guid.Empty 
      Interne Implementierungen geändert.
  * Durch diese Änderungen müssen alle Referenzen auf "DataDropDownList.SelectedValue" 
    berichtigt werden. Weiters müssen alle CompareValidators auf RequiredFieldValidators 
    umgestellt werden, da SelectedValue bei leerem Eintrag nicht mehr "-1", sondern string.Empty
    zurückliefert!
- Neue Methoden in "StandardPage":
  * GetIconImage (...): Liefert ein Icon Image (zB Info- oder Fehler-Image) zurück    
  * GetErrorImage (...): Error-Image
  * GetRequiredFieldImage (...): "*" für Pflichtfeld
  => Verwendet intern neue Klasse "UIUtility" => Wird in EntryFormGrid verwendet.
        
        
3.0.5.1
=======

- Bei Klassen Form, NavigablePage, Standardpage u. PageUtility: Bei allen Script-tags type="text/javascript" angeben ->
    HTML 4.0 Konformität für eGovernment Gütesiegel
    

3.0.5.0
=======

- ResourceDispatcher.Dispatch (...) - Änderung der Implementierung:
    Alt: Bei Setzen von Eigenschaften von HtmlControls wurde immer die Attributes-Collection verwendet.
    Neu: Auch bei HtmlControls wird vorher geprüft ob es ein Property gibt, ansonsten wird die 
         Attributes-Collection verwendet
  Grund: Bei serverseitigen HTML-Labels muss das Property "InnerText" gesetzt werden und nicht 
         über die Attributes-Collection

3.0.4.0
=======

- EntryFormGrid: Images müssen lt. HTML 4.0 einen Alt-Text definieren -> Whitespace-Images um leeren
    alt-text erweitert (Für eGovernment Gütesiegel)
- EntryField: For-Attribute der Labels werden nur gerendert, wenn diese auch beim EntryField 
    spezifiziert sind -> keine Defaultwerte
- StandardPage schreibt jetzt immer ResponseHeader, die Caching (im Browser, Proxyserver) verhindern.
- Bugfix in PageUtility.CallPage (...): Abfrage von ShowNavigationBar.Show und ShowNavigationBar.Hide 
  waren vertauscht => Bei Hide wurde ShowNavigationBar angezeigt und umgekehrt. 
  Da sich bestehende Projekte auf dieses Fehlverhalten verlassen, wurde der Enum von 
  ShowNavigationBar auf NavigationBar umbenannt. Deshalb sind bei der Einbindung einer neuen Version
  von Rubicon.Web.UI alle Rereferenzen von ShowNavigationBar zu korrigieren (Compile Errors).
- TabControl: Neue Methode GetCompleteUrl (...). Unterschied zu GetCurrentUrl (...) ist, dass der
  Tab der Ziel URL ausgewählt wird und nicht erhalten bleibt wie bei GetCurrentUrl.


3.0.3.0
=======

- Neues Control Form: Ist von ASP.NET Htmlform abgeleitet und bietet folgende Zusatzfeatures:
  * Action Attribut von server-seitiger Form setzen. Damit sind Posts auf andere Seiten möglich.
  * Es können mehrere server-seitige Forms auf einer ASP.NET Page platziert werden.
    Startup-Scripts, registrierte Script-Blöcke, registrierte Javascript-Arrays, 
    Viewstate, Postback-Function, etc. werden richtig gehandelt.


3.0.2.0
=======

- TableControl: AddRow (...), AddRowWithStyle (...), AddHorizontalRow (...) liefern jetzt die erzeugte Row zurück.


3.0.1.0
=======

- BugFix TabControl.cs:
  * CheckActiveMenu + GetCurrentUrl werten activeMenu nur aus wenn min. 1 TabMenu in Tab.Controls
    vorhanden.
  * GetCurrentUrl liefert HRef von Tag wenn TabMenu nicht vorhanden
- Neue Klassen NavigablePage und StandardPage.
- CommandHandler unterstützt jetzt auch " und ' bei Text in Benutzerrückfragen (Confirmation Methoden).


3.0.0.0
=======

- Erste Version