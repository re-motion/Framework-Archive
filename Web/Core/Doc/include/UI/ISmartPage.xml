<?xml version="1.0" encoding="utf-8" ?> 
<ISmartPage>
  <Class>
    <remarks>
      <h4 class="dtH4">Usage Notes</h4>
      <para>
        If possible, use the <see cref="SmartPage"/> default implementation of the <b>ISmartPage</b> interface
        as base page in your project.
      </para>
      <note type="inheritinfo">
        If you cannot derive your pages from the default implementation (e.g., because you need to derive from 
        another class), override your page's <see cref="Page.OnPreRender"/> method to call the pre-render logic. 
        Use <see cref="SmartPageInfo"/> to implement all methods and properties.
      </note>
    </remarks>
    <seealso cref="ISmartPage"/>
    <seealso cref="WxePage"/>
    <seealso cref="WxePageInfo"/>
    <seealso cref="WxePageStep"/>
    <example>
      Sample implementation of <see cref="Page.OnPreRender"/>. 
<code>
protected override void OnPreRender (EventArgs e)
{
  this.m_smartPageInfo.PreRender();
  base.OnPreRender (e);
}
</code>
    </example>
  </Class>
  <RegisterClientSidePageEventHandler>
    <param name="pageEvent"> The type of event to register for. </param>
    <param name="key"> 
      Forms in combination with <paramref name="pageEvent"/> a unique key that identifies the function.
    </param>
    <param name="function"> The name of the Java Script function to be called. </param>
    <remarks> 
      <para>
        The Java Script function will be called without arguments and a return value will be ignored.
      </para><para>
        Any script blocks with the same <paramref name="pageEvent"/> and <paremref name="key"/> parameter values 
        are considered duplicates. 
      </para>
    </remarks>
    <exception type="InvalidOperationException">
      Thrown if the method is called after the <b>OnPreRender</b> method of the base page has been invoked invoked.
    </exception>
  </RegisterClientSidePageEventHandler>
</ISmartPage>