<?xml version="1.0" encoding="utf-8" ?> 
<IWxePage>
  <Class>
    <remarks>
      <h4 class="dtH4">Using an IWxePage</h4>
      <para>
        A <see cref="Page"/> that implements <b>IWxePage</b> can be called by a <see cref="WxePageStep"/>. 
        Please refer to the documentation of the <see cref="WxePageStep"/> for details on the execution life 
        cycle outside the <b>IWxePage</b>'s scope.
      </para><para>
        To the application developer an <b>IWxePage</b> has the same look and feel as a normal ASP.NET Page. 
        You can use controls on the page and use the <see cref="Page.IsPostBack"/> flag as you would on any other 
        ASP.NET page.
      </para><para>
        If you do not rely on the controls to handle form input, there is one exception to the rule of treating 
        an <b>IWxePage</b> as a normal ASP.NET page. The post back data provided by the <see cref="Page.Request"/> 
        object of the <see cref="Page"/> does not necessarily contain the correct data. The execution engine provides 
        the relevant post back data via the <see cref="GetPostBackData"/> method. 
      </para>
      <h4 class="dtH4">Using Flow Control</h4>
      <para>
        The execution engine extends the basic functionality of a <see cref="Page"/> by connecting individual pages 
        through flow control syntax.
      </para> 
      <list type="bullet">
        <item>
          The <see cref="ExecuteNextStep"/> method can be invoked to end the execution of the current page step. 
          The execution engine will then resume with the next step or end the function, if it was the last step. 
          <see cref="ExecuteNextStep"/> is usually called in the click-event handler of a button, e.g. the save button 
          of a data entry form.
        </item>
        <item>
          <para>
            To cancel the execution of the current step and function, it is possible to throw a 
            <see cref="WxeUserCancelException"/>. This is usually done in the click-event handler of a cancel button.
            <see cref="ExecuteNextStep"/> should not be called when canceling the step.
          </para><para>
            To prevent the <see cref="WxeUserCancelException"/> from being passed to the root function, e.g.
            to continue with the execution in the previous function, use the 
            <see cref="WxeFunction.SetCatchExceptionTypes">WxeFunction.SetCatchExceptionTypes</see> method or
            use a <see cref="WxeTryCatch"/> step. For details on working with exceptions, please refer to the 
            <see cref="WxeFunction"/>'s documentation.
          </para>            
        </item>
        <item>
          <para>
            The execution engine also offers the option of navigating to a sub-function, e.g. a details form, by 
            calling the <see cref="ExecuteFunction"/> or <see cref="ExecuteFunctionNoRepost"/> methods. The new page
            can be displayed in the same page or inside a new window. For details, please refer to the documentation 
            of the afore mentioned execute methods.
          </para><para>
            After the sub-function has completed its execution, the execution engine returns control 
            to the calling page, optionally even to the same event handler. Evaluate the 
            <see cref="IsReturningPostBack"/> property to determine if the sub-function has returned. Use the 
            <see cref="ReturningFunction"/> property to access to the completed sub-function and its properties.         
          </para>
        </item>
      </list>
      <h4 class="dtH4">General Usage Notes</h4>
      <para>
        If possible, use the <see cref="WxePage"/> default implementation of the <b>IWxePage</b> interface
        as base page in your project.
      </para>
      <note type="inheritinfo">
        If you cannot derive your pages from the default implementation (e.g., because you need to derive from another 
        class), override your page's <see cref="Page.DeterminePostBackMode"/> and <see cref="Control.Dispose"/> methods. 
        Use <see cref="WxePageInfo"/> to implement all methods and properties.
      </note>
    </remarks>
    <example>
      Sample implementation of <see cref="Page.DeterminePostBackMode"/>.
<code>
protected override NameValueCollection DeterminePostBackMode()
{
  NameValueCollection result = this.m_wxeInfo.EnsurePostBackModeDetermined (Context);
  _wxeInfo.Initialize (Context);
  return result;
}
</code>
      Sample implementation of <see cref="Page.DeterminePostBackMode"/>.
<code>
public override void Dispose()
{
  base.Dispose ();
  this.m_wxeInfo.Dispose();
}
</code>
    </example>
  </Class>
  <ExecuteFunction>
    <param name="function"> The WXE new function to be executed. </param>  
    <param name="target"> The HTML frame/window name that will be used to execute the function. </param>
    <param name="features"> The features argument that is passed to the javascript function <b>window.open()</b>. </param>
    <param name="sender"> For calls from event handlers, the control that caused the event. </param>
    <param name="returningPostback"> <see langword="true"/> if the call should be returned to the current window. </param>
    <param name="usesEventTarget"> <see langword="true"/> to  use the <b>__EVENTTARGET</b> field. </param>
  </ExecuteFunction>
  <ExecuteFunctionNoRepost>
    <param name="function"> The WXE new function to be executed. </param>  
    <param name="sender"> For calls from event handlers, the control that caused the event. </param>
    <param name="usesEventTarget"> <see langword="true"/> to  use the <b>__EVENTTARGET</b> field. </param>
  </ExecuteFunctionNoRepost>
</IWxePage>