1.7.0
=====
- Upgrade auf NUnit 2.2.8 .net 2.0
- Upgrade auf log4net 1.2.10 .net 2.0
  Release Notes: http://logging.apache.org/log4net/release/release-notes.html
  vorherige Version 1.2.0 Beta 8
  Breaking Changes (gekürzt)
  * Renamed config classes and attributes
    In the log4net.Config namespace the DOMConfigurator and DOMConfiguratorAttribute have been marked as obsolete. The XmlConfigurator and 
    XmlConfiguratorAttribute types replace DOMConfigurator and DOMConfiguratorAttribute.
  * Fixed pascal casing of type names
    Renamed AdoNetAppender, AspNetTraceAppender, SmtpAppender, Iso8601DateFormatter, MdcFilter, and NdcFilter. Note that the config file type 
    resolver is case insensitive so this is only a breaking change for code that programmatically creates a type that has been renamed.
  * C style string escapes no longer supported by config parser
    The XML config parser no longer supports decoding C style escape sequences in strings. Previously sequences like \n and \\ where decoded. 
    Instead use the appropriate XML encodings as required.

1.4.56
======
- Rubicon.Utilities.SeparatedStringBuilder nach Rubicon.Text verschoben.
- Rubicon.Text.SimpleParser entfernt. (Hatte keine Funktionalität).

1.4.54
======
- Upgrade auf NUnit 2.2.7

1.4.23
======
- Rubicon.Utilitis.NameValueCollectionUtility
  * Stellt Marge, Append und Clone für NameValueCollections bereit.
  
1.4.8
=====
- Rubicon.Utilities.ArrayUtility: Stellt neue Methode Contains zur Verfügung.

1.3.21
======
- Rubicon.ObjectBinding.IBusinessObjectInstanceEnumerationProperty
  * Neues Interface. Verwendet um eingeschränkte Wertebereiche eines beliebigen Typs als Eum darzustellen.
  
1.3.19
======
- Rubicon.NullableValuteTypes.NaDouble:    
  * Parse akzeptiert nun 1000der-Trennzeichen, analog zu NaSingle.Parse und NaDecimal.Parse.
  
- Rubicon.Utilities.TypeConversionServices
  * Bietet eine CanConevert und eine Convert Methode um beliebige Typen zu konvertieren. 
  * Es können TypeConverter explizit für einen TYp registriert werden (AddTypeConverter), zB um einen Typ nachträglich
    mit einem TypeConverter auszustatten oder den vorhanden TypeConverter für die TypeConversionServices zu ersetzen.
  * Unterstützte Typeconversions:
    Von und zu Strings mittels passendem TypeConverter bzw einer statischen Parse Methode für den Typ.
    Alle weiteren TypeConversions welche der TypeConverter ermöglicht.
  * Current Property um eine allgemein verwendbare TypeConvsersionServices zu erhalten.
  * Create Methode um TypeConvsersionServices für einen speziellen Anwendungsfall zu erhalten. ZB um spezielle,
    nur für einen eingeschränkten Anwendungsbereich taugliche TypeConverter registrieren.
  
- Type Conversion
  * TypeConverter wandeln nun einheitlich null auf string.Empty bei der Konversion zu Strings.
  
1.3.18
======
- Rubicon.NullableValuteTypes.NaGuid:    
  * Parse hält sich nun an die Nullable Value types Convention, dass String.Empty Null entspricht, statt Guid.Empty.

1.3.16
======
- Rubicon.Xml.XmlSerializationUtility
  * DeserializeUsingSchema (XmlTextReader, string, Type, string schemaUri, XmlReader schemaReader) und
    DeserializeUsingSchema (XmlReader, string, Type, string schemaUri, XmlReader schemaReader) 
    erwarten den Namespace für Type nun im XmlRootAttribute oder im XmlTypeAttribute anstatt dass der Parameter 
    schemaUri verwendet wird.

- Rubicon.NullableValuteTypes.NaDouble:
    Bugfix: Parsing hat NumberStyle.Integer verwendet.

- Rubicon.NullableValuteTypes.NaGuid:    
  * Neue Konstruktor Overload mit string-Parameter.
  * Neue statische Methode Parse.
  
1.3.10
======
- Rubicon.Xml.XmlSerializationUtility
  * Errormessages überarbeitet.
  
- Rubicon.Xml.XmlSchemaValidationHandler
  * Errormessages überarbeitet.

1.3.2
=====
- Rubicon.Data.ITransaction
  * Neues Interface für Transaktionen.

1.2.63
======
- NullableValueTypes
  * Serialisierung nun via Attribut. Serialisierung via ISerializable brachte keinen messbaren Performancegewinn.
  * NaDouble:
    Bugfix: Wurde als Int32 deserialisiert.