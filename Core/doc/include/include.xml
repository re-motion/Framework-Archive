<?xml version="1.0" encoding="utf-8" ?> 

<Comments>

<NaBoolean>
  <remarks>
    <para>
      <c>NaBoolean</c> is basically a structure that can contain <c>true</c>, <c>false</c> or <c>Null</c>. Use <see cref="IsNull"/> to find 
      out whether a specific structure contains <c>Null</c>, or <c>NaBoolean.Null</c> to assign <c>Null</c> to a <c>NaBoolean</c> variable.
    </para>
    <para>
      You can use the <see cref="Value"/> property to access the boolean value, or the explicit <c>Boolean</c> conversion operator. Either
      method results in a <see cref="NaNullValueException"/> if the structure is <c>Null</c>.
    </para>
    <para>
      NaBoolean can be used as a replacement for <c>System.Data.SqlTypes.SqlBoolean</c> if you prefer the null-value semantics of <c>NaBoolean</c>
      or need serializability. Implicit conversion operators for <c>SqlBoolean </c>allow <c>NaBoolean</c> to be used seamlessly with ADO.NET.
    </para>
    <para>
      The following null-value semantics are used for <c>NaBoolean</c> structures:
    </para>
    <list type="table">
      <listheader>
        <term>Category</term>
        <description>Semantics</description>
      </listheader>
      <item>
        <term>Equality</term>
        <description>
          The standard equality methods and operators of <c>NaBoolean</c> consider two <see cref="Null"/> values equal.
          <para>
            Applies to <see cref="Equals"/>, <see cref="NotEquals"/>, <see cref="operator =="/>, <see cref="operator !="/>.
          </para>
        </description>
      </item>
      <item>
        <term>SQL-style Equality</term>
        <description>
          The SQL-style equality methods of <c>NaBoolean</c> return <c>NaBoolean.Null</c> if either of the compared values
          is <see cref="Null"/>. 
          <para>
            Applies to <see cref="EqualsSql"/>, <see cref="NotEqualsSql"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparision using <c>CompareTo</c></term>
        <description>
          The CompareTo methods of <c>NaBoolean</c> consider <see cref="Null"/> and null references to be less than any other value.
          Note that <c>false</c> is considerd greater than <c>true</c> and two <c>Null</c> values are considered equal:
          <para>
            <c>Null</c> &lt; <c>true</c> &lt; <c>false</c>
          </para>
          <para>
            Applies to <see cref="CompareTo"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Logical</term>
        <description>
          The logical methods and operators of <c>NaBoolean</c> return <see cref="Null"/> if eihter of their arguments are <c>Null</c>.
          <para>
            Applies to <see cref="And"/>, <see cref="Or"/>, <see cref="Xor"/>, <see cref="Not"/>, 
            <see cref="operator &amp;"/>, <see cref="operator |"/>, <see cref="operator ^"/>, <see cref="operator !"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Type Conversion</term>
        <description>
          If a <c>NaBoolean</c> null-value is converted to a <c>Boolean</c>, a <see cref="NaNullValueException"/> is thrown. Conversions 
          from <c>Boolean</c> to <c>NaBoolean</c>, and conversions to and from <c>SqlBoolean</c> never throw exceptions.
        </description>
      </item>
      <item>
        <term>Formatting and Parsing</term>
        <description>
          <para>
            If the instance is not <c>Null</c>, <c>ToString</c> returns the same string that <c>Boolean.ToString</c> would return. If it is
            <c>Null</c>, <c>ToString</c> returns the value <see cref="NullString"/> ("null"). Prefix the format string with the tilde 
            symbol ("~") to return a zero-length string for <c>Null</c>.
          </para>
          <para>
            <c>Parse</c> returns <c>Null</c> if the string is a null reference, a zero-length string or <see cref="NullString"/> ("null"). 
            Otherwise, it returns the same value that <c>Boolean.Parse</c> would return.
          </para>
        </description>
      </item>
    </list>
  </remarks>
</NaBoolean>

<NaDateTime>
  <remarks>
    <para>
      <c>NaDateTime</c> is basically a structure that can contain any date time value or <c>Null</c>. Use <see cref="IsNull"/> to find 
      out whether a specific structure contains <c>Null</c>, or <c>NaDateTime.Null</c> to assign <c>Null</c> to a <c>NaDateTime</c> variable.
    </para>
    <para>
      You can use the <see cref="Value"/> property to access the integer value, or the explicit <c>DateTime</c> conversion operator. Either
      method results in a <see cref="NaNullValueException"/> if the structure is <c>Null</c>.
    </para>
    <para>
      NaDateTime can be used as a replacement for <c>System.Data.SqlTypes.SqlDateTime</c> if you prefer the null-value semantics of <c>NaDateTime</c>
      or need serializability. Implicit conversion operators for <c>SqlDateTime </c>allow <c>NaDateTime</c> to be used seamlessly with ADO.NET.
    </para>
    <para>
      The following null-value semantics are used for <c>NaDateTime</c> structures:
    </para>
    <list type="table">
      <listheader>
        <term>Category</term>
        <description>Semantics</description>
      </listheader>
      <item>
        <term>Equality</term>
        <description>
          The standard equality methods and operators of <c>NaDateTime</c> consider two <see cref="Null"/> values equal.
          <para>
            Applies to <see cref="Equals"/>, <see cref="NotEquals"/>, <see cref="operator =="/>, <see cref="operator !="/>.
          </para>
        </description>
      </item>
      <item>
        <term>SQL-style Equality</term>
        <description>
          The SQL-style equality methods of <c>NaDateTime</c> return <c>NaBoolean.Null</c> if either of the compared values
          is <see cref="Null"/>. 
          <para>
            Applies to <see cref="EqualsSql"/>, <see cref="NotEqualsSql"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparison</term>
        <description>
          The standard compare methods and operators of <c>NaDateTime</c> return <c>NaBoolean.Null</c> if either of the compared values
          is <see cref="Null"/>. 
          <para>
            Applies to <see cref="LessThan"/>, <see cref="LessThanOrEqual"/>, <see cref="GreaterThan"/>, <see cref="GreaterThanOrEqual"/>,
            <see cref="operator &lt;"/>, <see cref="operator &lt;="/>, <see cref="operator &gt;"/>, <see cref="operator &gt;="/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparision using <c>CompareTo</c></term>
        <description>
          The CompareTo methods of <c>NaDateTime</c> consider <see cref="Null"/> and null references to be less than any other value.
          <para>
            Applies to <see cref="CompareTo"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Arithmetics</term>
        <description>
          The arithmetic methods and operators of <c>NaDateTime</c> return <see cref="Null"/> if the current instance or one of their 
          arguments are <c>Null</c>. All arithmetic methods are checked, i.e. an OverflowException may be thrown.
          <para>
            Applies to <see cref="Add"/>, <see cref="Subtract"/>, <see cref="AddYears"/>, <see cref="AddMonths"/>, <see cref="AddDays"/>, 
            <see cref="AddHours"/>, <see cref="AddMinutes"/>, <see cref="AddSeconds"/>, <see cref="AddMilliseconds"/>, 
            <see cref="operator +"/>, <see cref="operator -"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Type Conversion</term>
        <description>
          If a <c>NaDateTime</c> null-value is converted to an <c>DateTime</c>, a <see cref="NaNullValueException"/> is thrown. Conversions 
          from <c>DateTime</c> to <c>NaDateTime</c>, and conversions to and from <c>SqlDateTime</c> never throw exceptions.
        </description>
      </item>
      <item>
        <term>Formatting and Parsing</term>
        <description>
          <para>
            If the instance is not <c>Null</c>, <c>ToString</c> returns the same string that <c>DateTime.ToString</c> would return. If it is
            <c>Null</c>, <c>ToString</c> returns the value <see cref="NullString"/> ("null"). Prefix the format string with the tilde 
            symbol ("~") to return a
            zero-length string for <c>Null</c>.
          </para>
          <para>
            <c>Parse</c> returns <c>Null</c> if the string is a null reference, a zero-length string or <see cref="NullString"/> ("null"). 
            Otherwise, it returns the same value that <c>DateTime.Parse</c> would return.
          </para>
        </description>
      </item>
    </list>
  </remarks>
</NaDateTime>

<NaDouble>
  <remarks>
    <para>
      <c>NaDouble</c> is basically a structure that can contain any double-precision floating point value or <c>Null</c>. Use 
      <see cref="IsNull"/> to find out whether a specific structure contains <c>Null</c>, or <c>NaDouble.Null</c> to assign 
      <c>Null</c> to a <c>NaDouble</c> variable.
    </para>
    <para>
      You can use the <see cref="Value"/> property to access the floating point value, or the explicit <c>Double</c> conversion operator. Either
      method results in a <see cref="NaNullValueException"/> if the structure is <c>Null</c>.
    </para>
    <para>
      NaDouble can be used as a replacement for <c>System.Data.SqlTypes.SqlDouble</c> if you prefer the null-value semantics of <c>NaDouble</c>
      or need serializability. Implicit conversion operators for <c>SqlDouble </c>allow <c>NaDouble</c> to be used seamlessly with ADO.NET.
    </para>
    <para>
      The following null-value semantics are used for <c>NaDouble</c> structures:
    </para>
    <list type="table">
      <listheader>
        <term>Category</term>
        <description>Semantics</description>
      </listheader>
      <item>
        <term>Equality</term>
        <description>
          The standard equality methods and operators of <c>NaDouble</c> consider two <see cref="Null"/> values equal.
          <para>
            Applies to <see cref="Equals"/>, <see cref="NotEquals"/>, <see cref="operator =="/>, <see cref="operator !="/>.
          </para>
        </description>
      </item>
      <item>
        <term>SQL-style Equality</term>
        <description>
          The SQL-style equality methods of <c>NaDouble</c> return <c>NaBoolean.Null</c> if either of the compared values
          is <see cref="Null"/>. 
          <para>
            Applies to <see cref="EqualsSql"/>, <see cref="NotEqualsSql"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparison</term>
        <description>
          The standard compare methods and operators of <c>NaDouble</c> return <c>NaBoolean.Null</c> if either of the compared values
          is <see cref="Null"/>. 
          <para>
            Applies to <see cref="LessThan"/>, <see cref="LessThanOrEqual"/>, <see cref="GreaterThan"/>, <see cref="GreaterThanOrEqual"/>,
            <see cref="operator &lt;"/>, <see cref="operator &lt;="/>, <see cref="operator &gt;"/>, <see cref="operator &gt;="/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparision using <c>CompareTo</c></term>
        <description>
          The CompareTo methods of <c>NaDouble</c> consider <see cref="Null"/> and null references to be less than any other value.
          <para>
            Applies to <see cref="CompareTo"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Arithmetics</term>
        <description>
          The arithmetic methods and operators of <c>NaDouble</c> return <see cref="Null"/> if eihter of their arguments are <c>Null</c>.
          All arithmetic methods are checked, i.e. OverflowException and DivideByZeroException may be thrown where the same operation on
          System.Double valuews would only return infinite values.
          <para>
            Applies to <see cref="Add"/>, <see cref="Subtract"/>, <see cref="Multiply"/>, <see cref="Divide"/>, <see cref="Mod"/>, 
            <see cref="operator +"/>, <see cref="operator -"/>, <see cref="operator *"/>, <see cref="operator /"/>, <see cref="operator %"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Type Conversion</term>
        <description>
          If a <c>NaDouble</c> null-value is converted to an <c>Double</c>, a <see cref="NaNullValueException"/> is thrown. Conversions 
          from <c>Double</c> to <c>NaDouble</c>, and conversions to and from <c>SqlDouble</c> never throw exceptions.
        </description>
      </item>
      <item>
        <term>Formatting and Parsing</term>
        <description>
          <para>
            If the instance is not <c>Null</c>, <c>ToString</c> returns the same string that <c>Double.ToString</c> would return. If it is
            <c>Null</c>, <c>ToString</c> returns the value <see cref="NullString"/> ("null"). Prefix the format string with the tilde 
            symbol ("~") to return a
            zero-length string for <c>Null</c>.
          </para>
          <para>
            <c>Parse</c> returns <c>Null</c> if the string is a null reference, a zero-length string or <see cref="NullString"/> ("null"). 
            Otherwise, it returns the same value that <c>Double.Parse</c> would return.
          </para>
        </description>
      </item>
    </list>
  </remarks>
</NaDouble>

<NaInt32>
  <remarks>
    <para>
      <c>NaInt32</c> is basically a structure that can contain any 32-bit integer value or <c>Null</c>. Use <see cref="IsNull"/> to find 
      out whether a specific structure contains <c>Null</c>, or <c>NaInt32.Null</c> to assign <c>Null</c> to a <c>NaInt32</c> variable.
    </para>
    <para>
      You can use the <see cref="Value"/> property to access the integer value, or the explicit <c>Int32</c> conversion operator. Either
      method results in a <see cref="NaNullValueException"/> if the structure is <c>Null</c>.
    </para>
    <para>
      NaInt32 can be used as a replacement for <c>System.Data.SqlTypes.SqlInt32</c> if you prefer the null-value semantics of <c>NaInt32</c>
      or need serializability. Implicit conversion operators for <c>SqlInt32 </c>allow <c>NaInt32</c> to be used seamlessly with ADO.NET.
    </para>
    <para>
      The following null-value semantics are used for <c>NaInt32</c> structures:
    </para>
    <list type="table">
      <listheader>
        <term>Category</term>
        <description>Semantics</description>
      </listheader>
      <item>
        <term>Equality</term>
        <description>
          The standard equality methods and operators of <c>NaInt32</c> consider two <see cref="Null"/> values equal.
          <para>
            Applies to <see cref="Equals"/>, <see cref="NotEquals"/>, <see cref="operator =="/>, <see cref="operator !="/>.
          </para>
        </description>
      </item>
      <item>
        <term>SQL-style Equality</term>
        <description>
          The SQL-style equality methods of <c>NaInt32</c> return <c>NaBoolean.Null</c> if either of the compared values
          is <see cref="Null"/>. 
          <para>
            Applies to <see cref="EqualsSql"/>, <see cref="NotEqualsSql"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparison</term>
        <description>
          The standard compare methods and operators of <c>NaInt32</c> return <c>NaBoolean.Null</c> if either of the compared values
          is <see cref="Null"/>. 
          <para>
            Applies to <see cref="LessThan"/>, <see cref="LessThanOrEqual"/>, <see cref="GreaterThan"/>, <see cref="GreaterThanOrEqual"/>,
            <see cref="operator &lt;"/>, <see cref="operator &lt;="/>, <see cref="operator &gt;"/>, <see cref="operator &gt;="/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparision using <c>CompareTo</c></term>
        <description>
          The CompareTo methods of <c>NaInt32</c> consider <see cref="Null"/> and null references to be less than any other value.
          <para>
            Applies to <see cref="CompareTo"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Arithmetics</term>
        <description>
          The arithmetic methods and operators of <c>NaInt32</c> return <see cref="Null"/> if eihter of their arguments are <c>Null</c>.
          All arithmetic methods are checked, i.e. OverflowException and DivideByZeroException may be thrown.
          <para>
            Applies to <see cref="Add"/>, <see cref="Subtract"/>, <see cref="Multiply"/>, <see cref="Divide"/>, <see cref="Mod"/>, 
            <see cref="operator +"/>, <see cref="operator -"/>, <see cref="operator *"/>, <see cref="operator /"/>, <see cref="operator %"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Type Conversion</term>
        <description>
          If a <c>NaInt32</c> null-value is converted to an <c>Int32</c>, a <see cref="NaNullValueException"/> is thrown. Conversions 
          from <c>Int32</c> to <c>NaInt32</c>, and conversions to and from <c>SqlInt32</c> never throw exceptions.
        </description>
      </item>
      <item>
        <term>Formatting and Parsing</term>
        <description>
          <para>
            If the instance is not <c>Null</c>, <c>ToString</c> returns the same string that <c>Int32.ToString</c> would return. If it is
            <c>Null</c>, <c>ToString</c> returns the value <see cref="NullString"/> ("null"). Prefix the format string with the tilde 
            symbol ("~") to return a
            zero-length string for <c>Null</c>.
          </para>
          <para>
            <c>Parse</c> returns <c>Null</c> if the string is a null reference, a zero-length string or <see cref="NullString"/> ("null"). 
            Otherwise, it returns the same value that <c>Int32.Parse</c> would return.
          </para>
        </description>
      </item>
    </list>
  </remarks>
</NaInt32>

</Comments>