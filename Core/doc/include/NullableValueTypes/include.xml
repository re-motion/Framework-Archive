<?xml version="1.0" encoding="utf-8" ?> 

<Comments>
<INaNullable>
  <remarks>
    <para>
      Create a value type <b>NaT</b> for each value type <b>T</b> that you want to be able to contain 
      null values.
    </para>
    <para>
      A class that implements <see cref="INaNullable"/> must meet the following conditions:
    </para>
    <list type="bullet">
      <item>
        It must use the <see cref="NaBasicTypeAttribute"/> attribute to specify the basic type the wrap.
<code>
[NaBasicType (typeof(T))]
public struct NaT: INaNullable
</code>
      </item>
      <item>
        It must contain an <see cref="INullable.IsNull"/> property (implementing the base interface 
        <see cref="INullable"/>).
<code>
public bool IsNull { get; }
</code>
      </item>
      <item>
        It must contain s static property <see langword="null"/> of its own type to represent null values.
<code>
public static readonly NaT Null;
</code>
      </item>
      <item>
        It must contain a property that provides the value of the basic type. This property must throw a 
        <see cref="NaNullValueException"/> exception if the current instance is <see langword="null"/>.
<code>
public T Value {get;}
</code>
      </item>
      <item>
        <para>
          If the basic type is serializable, so must be the nullable type by apply the 
          <see cref="SerializableAttribute"/> to the nullable type's definition.
        </para><para>
          You may optionally implement the <see cref="ISerializable"/> interface to provide your own serialization 
          constructor and an <see cref="ISerializable.GetObjectData"/> method, but this is usually not necessary.
        <code>
          public void GetObjectData (SerializationInfo info, StreamingContext context);
          private NaT (SerializationInfo info, StreamingContext context);
        </code>
        </para> 
      </item>
      <item>
        It must contain a public static conversion method for converting boxed values to this type <b>NaT</b>. 
        This method must have the name <b>FromBoxed&lt;T&gt;</b> and accept a parameter of type <see cref="Object"/>.
        It must return its null-value if the parameter is <see langword="null"/>, and the according <b>NaT</b> value 
        if the parameter is an instance of <b>T</b>. All other types may yield an <see cref="ArgumentException"/>.
<code>
public static NaT FromBoxed&lt;T&gt; (object value);
</code>
      </item>
      <item>
        It must contain a public static conversion method for converting its values to boxed values of the wrapped 
        type <b>T</b>. This method must have the name <b>ToBoxed&lt;T&gt;</b> and accept a parameter of type 
        <b>NaT</b>. It must return <see langword="null"/> if the parameter is its null-value, and the according 
        <b>T</b> value otherwise.
<code>
public static object ToBoxed&lt;T&gt; (NaT value);
</code>
      </item>
      <item>
        The type may also contain converions methods that behave like the <b>FromBoxed&lt;T&gt;</b> and 
        <b>ToBoxed&lt;T&gt;</b> but use <see cref="DBNull.Value">DBNull.Value</see> instead of 
        <see langword="null"/>.
        They must be called <b>FromBoxed&lt;T&gt;DBNull</b> and <b>ToBoxed&lt;T&gt;DBNull</b>, respectively.
      </item>
      <item>
        The type must implement equality such as that two null values are considered equal.
      </item>
    </list>
  </remarks>
</INaNullable>

<NaBoolean>
  <remarks>
    <para>
      <see cref="NaBoolean"/> is basically a structure that can contain <see langword="true"/>, <see langword="false"/> or
      <see langword="null"/>. Use <see cref="IsNull"/> to find out whether a specific structure contains 
      <see langword="null"/>, or <see cref="NaBoolean.Null"/> to assign <see langword="null"/> to a 
      <see cref="NaBoolean"/> variable.
    </para>
    <para>
      You can use the <see cref="Value"/> property to access the boolean value, or the explicit <see cref="Boolean"/> 
      conversion operator. Either method results in an <see cref="NaNullValueException"/> if the structure is 
      <see langword="null"/>.
    </para>
    <para>
      NaBoolean can be used as a replacement for <see cref="System.Data.SqlTypes.SqlBoolean"/> if you prefer the 
      null-value semantics of <see cref="NaBoolean"/> or need serializability. Implicit conversion operators for 
      <see cref="SqlBoolean "/>allow <see cref="NaBoolean"/> to be used seamlessly with ADO.NET.
    </para>
    <para>
      The following null-value semantics are used for <see cref="NaBoolean"/> structures:
    </para>
    <list type="table">
      <listheader>
        <term>Category</term>
        <description>Semantics</description>
      </listheader>
      <item>
        <term>Equality</term>
        <description>
          The standard equality methods and operators of <see cref="NaBoolean"/> consider two <see cref="Null"/> 
          values 
          equal.
          <para>
            Applies to <see cref="Equals"/>, <see cref="NotEquals"/>, <see cref="operator =="/>, 
            <see cref="operator !="/>.
          </para>
        </description>
      </item>
      <item>
        <term>SQL-style Equality</term>
        <description>
          The SQL-style equality methods of <see cref="NaBoolean"/> return <see cref="NaBoolean.Null"/> if either 
          of the 
          compared values
is <see cref="Null"/>. 
          <para>
            Applies to <see cref="EqualsSql"/>, <see cref="NotEqualsSql"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparision using <see cref="CompareTo"/></term>
        <description>
          The CompareTo methods of <see cref="NaBoolean"/> consider <see cref="Null"/> and null references to be 
          less than any other value. Note that <see langword="false"/> is considerd greater than 
          <see langword="true"/> and two <see langword="null"/> values are considered equal:
          <para>
            <see langword="null"/> &lt; <see langword="true"/> &lt; <see langword="false"/>
          </para>
          <para>
            Applies to <see cref="CompareTo"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Logical</term>
        <description>
          The logical methods and operators of <see cref="NaBoolean"/> return <see cref="Null"/> if eihter of their 
          arguments are <see langword="null"/>.
          <para>
            Applies to <see cref="Xor"/>, <see cref="Not"/>, <see cref="operator &amp;"/>, <see cref="operator |"/>, 
            <see cref="operator ^"/>, <see cref="operator !"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Type Conversion</term>
        <description>
          If an <see cref="NaBoolean"/> null-value is converted to a <see cref="Boolean"/>, a 
          <see cref="NaNullValueException"/> is thrown. Conversions from <see cref="Boolean"/> to 
          <see cref="NaBoolean"/>, and conversions to and from <see cref="SqlBoolean"/> never throw exceptions.
        </description>
      </item>
      <item>
        <term>Formatting and Parsing</term>
        <description>
          <para>
            If the instance is not <see langword="null"/>, <see cref="ToString"/> returns the same string that 
            <see cref="Boolean.ToString"/> would return. If it is <see langword="null"/>, <see cref="ToString"/> 
            returns the value <see cref="NullString"/> ("null"). Prefix the format string with the tilde symbol ("~") 
            to return a zero-length string for <see langword="null"/>.
          </para>
          <para>
            <see cref="Parse"/> returns <see langword="null"/> if the string is a null reference, a zero-length 
            string or <see cref="NullString"/> ("null"). Otherwise, it returns the same value that 
            <see cref="Boolean.Parse"/> would return.
          </para>
        </description>
      </item>
    </list>
  </remarks>
</NaBoolean>

<NaDateTime>
  <remarks>
    <para>
      <see cref="NaDateTime"/> is basically a structure that can contain any date time value or <see langword="null"/>. Use 
      <see cref="IsNull"/> to find out whether a specific structure contains <see langword="null"/>, or 
      <see cref="NaDateTime.Null"/> to assign <see langword="null"/> to an <see cref="NaDateTime"/> variable.
    </para>
    <para>
      You can use the <see cref="Value"/> property to access the integer value, or the explicit <see cref="DateTime"/> 
      conversion operator. Either method results in an <see cref="NaNullValueException"/> if the structure is 
      <see langword="null"/>.
    </para>
    <para>
      NaDateTime can be used as a replacement for <see cref="System.Data.SqlTypes.SqlDateTime"/> if you prefer the 
      null-value semantics of <see cref="NaDateTime"/> or need serializability. Implicit conversion operators for 
      <see cref="SqlDateTime "/> allow <see cref="NaDateTime"/> to be used seamlessly with ADO.NET.
    </para>
    <para>
      The following null-value semantics are used for <see cref="NaDateTime"/> structures:
    </para>
    <list type="table">
      <listheader>
        <term>Category</term>
        <description>Semantics</description>
      </listheader>
      <item>
        <term>Equality</term>
        <description>
          The standard equality methods and operators of <see cref="NaDateTime"/> consider two <see cref="Null"/> 
          values equal.
          <para>
            Applies to <see cref="Equals"/>, <see cref="NotEquals"/>, <see cref="operator =="/>, 
            <see cref="operator !="/>.
          </para>
        </description>
      </item>
      <item>
        <term>SQL-style Equality</term>
        <description>
          The SQL-style equality methods of <see cref="NaDateTime"/> return <see cref="NaBoolean.Null"/> if either 
          of the compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="EqualsSql"/>, <see cref="NotEqualsSql"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparison</term>
        <description>
          The standard compare methods and operators of <see cref="NaDateTime"/> return <see cref="NaBoolean.Null"/> 
          if either of the compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="LessThan"/>, <see cref="LessThanOrEqual"/>, <see cref="GreaterThan"/>, 
            <see cref="GreaterThanOrEqual"/>, <see cref="operator &lt;"/>, <see cref="operator &lt;="/>, 
            <see cref="operator &gt;"/>, <see cref="operator &gt;="/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparision using <see cref="CompareTo"/></term>
        <description>
          The CompareTo methods of <see cref="NaDateTime"/> consider <see cref="Null"/> and null references to be 
          less than any other value.
          <para>
            Applies to <see cref="CompareTo"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Arithmetics</term>
        <description>
          The arithmetic methods and operators of <see cref="NaDateTime"/> return <see cref="Null"/> if the current
           instance or one of their 
          arguments are <see langword="null"/>. All arithmetic methods are checked, i.e. an OverflowException may 
          be thrown.
          <para>
            Applies to <see cref="Add"/>, <see cref="Subtract"/>, <see cref="AddYears"/>, <see cref="AddMonths"/>, 
            <see cref="AddDays"/>, <see cref="AddHours"/>, <see cref="AddMinutes"/>, <see cref="AddSeconds"/>, 
            <see cref="AddMilliseconds"/>, <see cref="operator +"/>, <see cref="operator -"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Type Conversion</term>
        <description>
          If an <see cref="NaDateTime"/> null-value is converted to an <see cref="DateTime"/>, a 
          <see cref="NaNullValueException"/> is thrown. Conversions from <see cref="DateTime"/> to 
          <see cref="NaDateTime"/>, and conversions to and from <see cref="SqlDateTime"/> never throw exceptions.
        </description>
      </item>
      <item>
        <term>Formatting and Parsing</term>
        <description>
          <para>
            If the instance is not <see langword="null"/>, <see cref="ToString"/> returns the same string that
            <see cref="DateTime.ToString"/> would return. If it is <see langword="null"/>, <see cref="ToString"/> 
            returns the value <see cref="NullString"/> ("null"). Prefix the format string with the tilde symbol ("~") 
            to return a zero-length string for <see langword="null"/>.
          </para>
          <para>
            <see cref="Parse"/> returns <see langword="null"/> if the string is a null reference, a zero-length 
            string or <see cref="NullString"/> ("null"). Otherwise, it returns the same value that 
            <see cref="DateTime.Parse"/> would return.
          </para>
        </description>
      </item>
    </list>
  </remarks>
</NaDateTime>

<NaDouble>
  <remarks>
    <para>
      <see cref="NaDouble"/> is basically a structure that can contain any double-precision floating point value or 
      <see langword="null"/>. Use <see cref="IsNull"/> to find out whether a specific structure contains 
      <see langword="null"/>, or <see cref="NaDouble.Null"/> to assign <see langword="null"/> to an 
      <see cref="NaDouble"/> variable.
    </para>
    <para>
      You can use the <see cref="Value"/> property to access the floating point value, or the explicit 
      <see cref="Double"/> conversion operator. Either method results in an <see cref="NaNullValueException"/> 
      if the structure is <see langword="null"/>.
    </para>
    <para>
      NaDouble can be used as a replacement for <see cref="System.Data.SqlTypes.SqlDouble"/> if you prefer the 
      null-value semantics of <see cref="NaDouble"/> or need serializability. Implicit conversion operators for 
      <see cref="SqlDouble "/>allow <see cref="NaDouble"/> to be used seamlessly with ADO.NET.
    </para>
    <para>
      The following null-value semantics are used for <see cref="NaDouble"/> structures:
    </para>
    <list type="table">
      <listheader>
        <term>Category</term>
        <description>Semantics</description>
      </listheader>
      <item>
        <term>Equality</term>
        <description>
          The standard equality methods and operators of <see cref="NaDouble"/> consider two <see cref="Null"/> 
          values equal.
          <para>
            Applies to <see cref="Equals"/>, <see cref="NotEquals"/>, <see cref="operator =="/>, 
            <see cref="operator !="/>.
          </para>
        </description>
      </item>
      <item>
        <term>SQL-style Equality</term>
        <description>
          The SQL-style equality methods of <see cref="NaDouble"/> return <see cref="NaBoolean.Null"/> if either of 
          the compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="EqualsSql"/>, <see cref="NotEqualsSql"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparison</term>
        <description>
          The standard compare methods and operators of <see cref="NaDouble"/> return <see cref="NaBoolean.Null"/> 
          if either of the compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="LessThan"/>, <see cref="LessThanOrEqual"/>, <see cref="GreaterThan"/>, 
            <see cref="GreaterThanOrEqual"/>, <see cref="operator &lt;"/>, <see cref="operator &lt;="/>, 
            <see cref="operator &gt;"/>, <see cref="operator &gt;="/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparision using <see cref="CompareTo"/></term>
        <description>
          The CompareTo methods of <see cref="NaDouble"/> consider <see cref="Null"/> and null references to be less 
          than any other value.
          <para>
            Applies to <see cref="CompareTo"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Arithmetics</term>
        <description>
          The arithmetic methods and operators of <see cref="NaDouble"/> return <see cref="Null"/> if eihter of their 
          arguments are <see langword="null"/>. All arithmetic methods are checked, i.e. 
          <see cref="OverflowException"/> and <see cref="DivideByZeroException"/> may be thrown where the same 
          operation on System.Double values would only return infinite values.
          <para>
            Applies to <see cref="Add"/>, <see cref="Subtract"/>, <see cref="Multiply"/>, <see cref="Divide"/>, 
            <see cref="Mod"/>, <see cref="operator +"/>, <see cref="operator -"/>, <see cref="operator *"/>, 
            <see cref="operator /"/>, <see cref="operator %"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Type Conversion</term>
        <description>
          If an <see cref="NaDouble"/> null-value is converted to an <see cref="Double"/>, a 
          <see cref="NaNullValueException"/> is thrown. Conversions from <see cref="Double"/> to 
          <see cref="NaDouble"/>, and conversions to and from <see cref="SqlDouble"/> never throw exceptions.
        </description>
      </item>
      <item>
        <term>Formatting and Parsing</term>
        <description>
          <para>
            If the instance is not <see langword="null"/>, <see cref="ToString"/> returns the same string that 
            <see cref="Double.ToString"/> would return. If it is <see langword="null"/>, <see cref="ToString"/> 
            returns the value <see cref="NullString"/> ("null"). Prefix the format string with the tilde symbol ("~") 
            to return a zero-length string for <see langword="null"/>.
          </para>
          <para>
            <see cref="Parse"/> returns <see langword="null"/> if the string is a null reference, a zero-length 
            string or <see cref="NullString"/> ("null"). Otherwise, it returns the same value that 
            <see cref="Double.Parse"/> would return.
          </para>
        </description>
      </item>
    </list>
  </remarks>
</NaDouble>

<NaInt32>
  <remarks>
    <para>
      <see cref="NaInt32"/> is basically a structure that can contain any 32-bit integer value or 
      <see langword="null"/>. Use <see cref="IsNull"/> to find out whether a specific structure contains 
      <see langword="null"/>, or <see cref="NaInt32.Null"/> to assign <see langword="null"/> to an 
      <see cref="NaInt32"/> variable.
    </para>
    <para>
      You can use the <see cref="Value"/> property to access the integer value, or the explicit <see cref="Int32"/> 
      conversion operator. Either method results in an <see cref="NaNullValueException"/> if the structure is 
      <see langword="null"/>.
    </para>
    <para>
      NaInt32 can be used as a replacement for <see cref="System.Data.SqlTypes.SqlInt32"/> if you prefer the 
      null-value semantics of <see cref="NaInt32"/> or need serializability. Implicit conversion operators for 
      <see cref="SqlInt32 "/>allow <see cref="NaInt32"/> to be used seamlessly with ADO.NET.
    </para>
    <para>
      The following null-value semantics are used for <see cref="NaInt32"/> structures:
    </para>
    <list type="table">
      <listheader>
        <term>Category</term>
        <description>Semantics</description>
      </listheader>
      <item>
        <term>Equality</term>
        <description>
          The standard equality methods and operators of <see cref="NaInt32"/> consider two <see cref="Null"/> values 
          equal.
          <para>
            Applies to <see cref="Equals"/>, <see cref="NotEquals"/>, <see cref="operator =="/>, 
            <see cref="operator !="/>.
          </para>
        </description>
      </item>
      <item>
        <term>SQL-style Equality</term>
        <description>
          The SQL-style equality methods of <see cref="NaInt32"/> return <see cref="NaInt32.Null"/> if either of the 
          compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="EqualsSql"/>, <see cref="NotEqualsSql"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparison</term>
        <description>
          The standard compare methods and operators of <see cref="NaInt32"/> return <see cref="NaInt32.Null"/> if 
          either of the compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="LessThan"/>, <see cref="LessThanOrEqual"/>, <see cref="GreaterThan"/>, 
            <see cref="GreaterThanOrEqual"/>,
            <see cref="operator &lt;"/>, <see cref="operator &lt;="/>, <see cref="operator &gt;"/>, 
            <see cref="operator &gt;="/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparision using <see cref="CompareTo"/></term>
        <description>
          The CompareTo methods of <see cref="NaInt32"/> consider <see cref="Null"/> and null references to be less 
          than any other value.
          <para>
            Applies to <see cref="CompareTo"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Arithmetics</term>
        <description>
          The arithmetic methods and operators of <see cref="NaInt32"/> return <see cref="Null"/> if eihter of their 
          arguments are <see langword="null"/>. All arithmetic methods are checked, i.e. 
          <see cref="OverflowException"/> and <see cref="DivideByZeroException"/> may be thrown.
          <para>
            Applies to <see cref="Add"/>, <see cref="Subtract"/>, <see cref="Multiply"/>, <see cref="Divide"/>, 
            <see cref="Mod"/>, <see cref="operator +"/>, <see cref="operator -"/>, <see cref="operator *"/>, 
            <see cref="operator /"/>, <see cref="operator %"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Type Conversion</term>
        <description>
          If an <see cref="NaInt32"/> null-value is converted to an <see cref="Int32"/>, a 
          <see cref="NaNullValueException"/> is thrown. Conversions from <see cref="Int32"/> to <see cref="NaInt32"/>, 
          and conversions to and from <see cref="SqlInt32"/> never throw exceptions.
        </description>
      </item>
      <item>
        <term>Formatting and Parsing</term>
        <description>
          <para>
            If the instance is not <see langword="null"/>, <see cref="ToString"/> returns the same string that 
            <see cref="Int32.ToString"/> would return. If it is <see langword="null"/>, <see cref="ToString"/> returns 
            the value <see cref="NullString"/> ("null"). Prefix the format string with the tilde symbol ("~") to 
            return a zero-length string for <see langword="null"/>.
          </para>
          <para>
            <see cref="Parse"/> returns <see langword="null"/> if the string is a null reference, a zero-length string 
            or <see cref="NullString"/> ("null"). Otherwise, it returns the same value that 
            <see cref="Int32.Parse"/> would return.
          </para>
        </description>
      </item>
    </list>
  </remarks>
</NaInt32>

<NaByte>
  <remarks>
    <para>
      <see cref="NaByte"/> is basically a structure that can contain any 8-bit unsigned integer value or 
      <see langword="null"/>. Use <see cref="IsNull"/> to find out whether a specific structure contains 
      <see langword="null"/>, or <see cref="NaByte.Null"/> to assign <see langword="null"/> to an <see cref="NaByte"/>
      variable.
    </para>
    <para>
      You can use the <see cref="Value"/> property to access the integer value, or the explicit <see cref="Byte"/> 
      conversion operator. Either method results in an <see cref="NaNullValueException"/> if the structure is 
      <see langword="null"/>.
    </para>
    <para>
      NaByte can be used as a replacement for <see cref="System.Data.SqlTypes.SqlByte"/> if you prefer the null-value 
      semantics of <see cref="NaByte"/> or need serializability. Implicit conversion operators for 
      <see cref="SqlByte"/>allow <see cref="NaByte"/> to be used seamlessly with ADO.NET.
    </para>
    <para>
      The following null-value semantics are used for <see cref="NaByte"/> structures:
    </para>
    <list type="table">
      <listheader>
        <term>Category</term>
        <description>Semantics</description>
      </listheader>
      <item>
        <term>Equality</term>
        <description>
          The standard equality methods and operators of <see cref="NaByte"/> consider two <see cref="Null"/> values 
          equal.
          <para>
            Applies to <see cref="Equals"/>, <see cref="NotEquals"/>, <see cref="operator =="/>, 
            <see cref="operator !="/>.
          </para>
        </description>
      </item>
      <item>
        <term>SQL-style Equality</term>
        <description>
          The SQL-style equality methods of <see cref="NaByte"/> return <see cref="NaByte.Null"/> if either of the 
          compared values
is <see cref="Null"/>. 
          <para>
            Applies to <see cref="EqualsSql"/>, <see cref="NotEqualsSql"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparison</term>
        <description>
          The standard compare methods and operators of <see cref="NaByte"/> return <see cref="NaByte.Null"/> if 
          either of the compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="LessThan"/>, <see cref="LessThanOrEqual"/>, <see cref="GreaterThan"/>, 
            <see cref="GreaterThanOrEqual"/>, <see cref="operator &lt;"/>, <see cref="operator &lt;="/>, 
            <see cref="operator &gt;"/>, <see cref="operator &gt;="/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparision using <see cref="CompareTo"/></term>
        <description>
          The CompareTo methods of <see cref="NaByte"/> consider <see cref="Null"/> and null references to be less 
          than any other value.
          <para>
            Applies to <see cref="CompareTo"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Arithmetics</term>
        <description>
          The arithmetic methods and operators of <see cref="NaByte"/> return <see cref="Null"/> if eihter of their 
          arguments are <see langword="null"/>. All arithmetic methods are checked, i.e. 
          <see cref="OverflowException"/> and <see cref="DivideByZeroException"/> may be thrown.
          <para>
            Applies to <see cref="Add"/>, <see cref="Subtract"/>, <see cref="Multiply"/>, <see cref="Divide"/>, 
            <see cref="Mod"/>, 
            <see cref="operator +"/>, <see cref="operator -"/>, <see cref="operator *"/>, <see cref="operator /"/>, 
            <see cref="operator %"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Type Conversion</term>
        <description>
          If an <see cref="NaByte"/> null-value is converted to a <see cref="Byte"/>, a 
          <see cref="NaNullValueException"/> is thrown. Conversions from <see cref="Byte"/> to <see cref="NaByte"/>, 
          and conversions to and from <see cref="SqlByte"/> never throw exceptions.
        </description>
      </item>
      <item>
        <term>Formatting and Parsing</term>
        <description>
          <para>
            If the instance is not <see langword="null"/>, <see cref="ToString"/> returns the same string that 
            <see cref="Byte.ToString"/> would return. If it is <see langword="null"/>, <see cref="ToString"/> returns 
            the value <see cref="NullString"/> ("null"). Prefix the format string with the tilde symbol ("~") to 
            return a zero-length string for <see langword="null"/>.
          </para>
          <para>
            <see cref="Parse"/> returns <see langword="null"/> if the string is a null reference, a zero-length string 
            or <see cref="NullString"/> ("null"). Otherwise, it returns the same value that <see cref="Byte.Parse"/> 
            would return.
          </para>
        </description>
      </item>
    </list>
  </remarks>
</NaByte>

<NaDecimal>
  <remarks>
    <para>
      <see cref="NaDecimal"/> is basically a structure that can contain any decimal value or <see langword="null"/>. 
      Use <see cref="IsNull"/> to find out whether a specific structure contains <see langword="null"/>, or 
      <see cref="NaDecimal.Null"/> to assign <see langword="null"/> to an <see cref="NaDecimal"/> variable.
    </para>
    <para>
      You can use the <see cref="Value"/> property to access the decimal value, or the explicit <see cref="Decimal"/> 
      conversion operator. Either method results in an <see cref="NaNullValueException"/> if the structure is 
      <see langword="null"/>.
    </para>
    <para>
      NaDecimal can be used as a replacement for <see cref="System.Data.SqlTypes.SqlDecimal"/> if you prefer the 
      null-value semantics of <see cref="NaDecimal"/> or need serializability. Implicit conversion operators for 
      <see cref="SqlDecimal "/>allow <see cref="NaDecimal"/> to be used seamlessly with ADO.NET.
    </para>
    <para>
      The following null-value semantics are used for <see cref="NaDecimal"/> structures:
    </para>
    <list type="table">
      <listheader>
        <term>Category</term>
        <description>Semantics</description>
      </listheader>
      <item>
        <term>Equality</term>
        <description>
          The standard equality methods and operators of <see cref="NaDecimal"/> consider two <see cref="Null"/> 
          values equal.
          <para>
            Applies to <see cref="Equals"/>, <see cref="NotEquals"/>, <see cref="operator =="/>, 
            <see cref="operator !="/>.
          </para>
        </description>
      </item>
      <item>
        <term>SQL-style Equality</term>
        <description>
          The SQL-style equality methods of <see cref="NaDecimal"/> return <see cref="NaDecimal.Null"/> if either of 
          the compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="EqualsSql"/>, <see cref="NotEqualsSql"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparison</term>
        <description>
          The standard compare methods and operators of <see cref="NaDecimal"/> return <see cref="NaDecimal.Null"/> if 
          either of the compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="LessThan"/>, <see cref="LessThanOrEqual"/>, <see cref="GreaterThan"/>, 
            <see cref="GreaterThanOrEqual"/>, <see cref="operator &lt;"/>, <see cref="operator &lt;="/>, 
            <see cref="operator &gt;"/>, <see cref="operator &gt;="/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparision using <see cref="CompareTo"/></term>
        <description>
          The CompareTo methods of <see cref="NaDecimal"/> consider <see cref="Null"/> and null references to be less 
          than any other value.
          <para>
            Applies to <see cref="CompareTo"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Arithmetics</term>
        <description>
          The arithmetic methods and operators of <see cref="NaDecimal"/> return <see cref="Null"/> if either of their 
          arguments are <see langword="null"/>. All arithmetic methods are checked, i.e. 
          <see cref="OverflowException"/> and <see cref="DivideByZeroException"/> may be thrown.
          <para>
            Applies to <see cref="Add"/>, <see cref="Subtract"/>, <see cref="Multiply"/>, <see cref="Divide"/>, 
            <see cref="Mod"/>, <see cref="operator +"/>, <see cref="operator -"/>, <see cref="operator *"/>, 
            <see cref="operator /"/>, <see cref="operator %"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Type Conversion</term>
        <description>
          If an <see cref="NaDecimal"/> null-value is converted to a <see cref="Decimal"/>, a 
          <see cref="NaNullValueException"/> is thrown. Conversions from <see cref="Decimal"/> to 
          <see cref="NaDecimal"/>, and conversions to and from <see cref="SqlDecimal"/> never throw exceptions.
        </description>
      </item>
      <item>
        <term>Formatting and Parsing</term>
        <description>
          <para>
            If the instance is not <see langword="null"/>, <see cref="ToString"/> returns the same string that 
            <see cref="Decimal.ToString"/> would return. If it is <see langword="null"/>, <see cref="ToString"/> 
            returns the value <see cref="NullString"/> ("null"). Prefix the format string with the tilde symbol ("~") 
            to return a zero-length string for <see langword="null"/>.
          </para>
          <para>
            <see cref="Parse"/> returns <see langword="null"/> if the string is a null reference, a zero-length string 
            or <see cref="NullString"/> ("null"). Otherwise, it returns the same value that 
            <see cref="Decimal.Parse"/> would return.
          </para>
        </description>
      </item>
    </list>
  </remarks>
</NaDecimal>

<NaInt16>
  <remarks>
    <para>
      <see cref="NaInt16"/> is basically a structure that can contain any 16-bit integer value or 
      <see langword="null"/>. Use <see cref="IsNull"/> to find out whether a specific structure contains 
      <see langword="null"/>, or <see cref="NaInt16.Null"/> to assign <see langword="null"/> to an 
      <see cref="NaInt16"/> variable.
    </para>
    <para>
      You can use the <see cref="Value"/> property to access the integer value, or the explicit <see cref="Int16"/> 
      conversion operator. Either method results in an <see cref="NaNullValueException"/> if the structure is 
      <see langword="null"/>.
    </para>
    <para>
      NaInt16 can be used as a replacement for <see cref="System.Data.SqlTypes.SqlInt16"/> if you prefer the 
      null-value semantics of <see cref="NaInt16"/> or need serializability. Implicit conversion operators for 
      <see cref="SqlInt16 "/>allow <see cref="NaInt16"/> to be used seamlessly with ADO.NET.
    </para>
    <para>
      The following null-value semantics are used for <see cref="NaInt16"/> structures:
    </para>
    <list type="table">
      <listheader>
        <term>Category</term>
        <description>Semantics</description>
      </listheader>
      <item>
        <term>Equality</term>
        <description>
          The standard equality methods and operators of <see cref="NaInt16"/> consider two <see cref="Null"/> values
           equal.
          <para>
            Applies to <see cref="Equals"/>, <see cref="NotEquals"/>, <see cref="operator =="/>, 
            <see cref="operator !="/>.
          </para>
        </description>
      </item>
      <item>
        <term>SQL-style Equality</term>
        <description>
          The SQL-style equality methods of <see cref="NaInt16"/> return <see cref="NaInt16.Null"/> if either of the 
          compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="EqualsSql"/>, <see cref="NotEqualsSql"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparison</term>
        <description>
          The standard compare methods and operators of <see cref="NaInt16"/> return <see cref="NaInt16.Null"/> if 
          either of the compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="LessThan"/>, <see cref="LessThanOrEqual"/>, <see cref="GreaterThan"/>, 
            <see cref="GreaterThanOrEqual"/>,
            <see cref="operator &lt;"/>, <see cref="operator &lt;="/>, <see cref="operator &gt;"/>, 
            <see cref="operator &gt;="/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparision using <see cref="CompareTo"/></term>
        <description>
          The CompareTo methods of <see cref="NaInt16"/> consider <see cref="Null"/> and null references to be 
          less than any other value.
          <para>
            Applies to <see cref="CompareTo"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Arithmetics</term>
        <description>
          The arithmetic methods and operators of <see cref="NaInt16"/> return <see cref="Null"/> if either of their 
          arguments are <see langword="null"/>. All arithmetic methods are checked, i.e. 
          <see cref="OverflowException"/> and <see cref="DivideByZeroException"/> may be thrown.
          <para>
            Applies to <see cref="Add"/>, <see cref="Subtract"/>, <see cref="Multiply"/>, <see cref="Divide"/>, 
            <see cref="Mod"/>, <see cref="operator +"/>, <see cref="operator -"/>, <see cref="operator *"/>, 
            <see cref="operator /"/>, <see cref="operator %"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Type Conversion</term>
        <description>
          If an <see cref="NaInt16"/> null-value is converted to a <see cref="Int16"/>, a 
          <see cref="NaNullValueException"/> is thrown. Conversions from <see cref="Int16"/> to <see cref="NaInt16"/>, 
          and conversions to and from <see cref="SqlInt16"/> never throw exceptions.
        </description>
      </item>
      <item>
        <term>Formatting and Parsing</term>
        <description>
          <para>
            If the instance is not <see langword="null"/>, <see cref="ToString"/> returns the same string that 
            <see cref="Int16.ToString"/> would return. If it is <see langword="null"/>, <see cref="ToString"/> returns 
            the value <see cref="NullString"/> ("null"). Prefix the format string with the tilde symbol ("~") to 
            return a zero-length string for <see langword="null"/>.
          </para>
          <para>
            <see cref="Parse"/> returns <see langword="null"/> if the string is a null reference, a zero-length 
            string or <see cref="NullString"/> ("null"). Otherwise, it returns the same value that 
            <see cref="Int16.Parse"/> would return.
          </para>
        </description>
      </item>
    </list>
  </remarks>
</NaInt16>

<NaInt64>
  <remarks>
    <para>
      <see cref="NaInt64"/> is basically a structure that can contain any 64-bit integer value or 
      <see langword="null"/>. Use <see cref="IsNull"/> to find out whether a specific structure contains 
      <see langword="null"/>, or <see cref="NaInt64.Null"/> to assign <see langword="null"/> to an 
      <see cref="NaInt64"/> variable.
    </para>
    <para>
      You can use the <see cref="Value"/> property to access the integer value, or the explicit <see cref="Int64"/> 
      conversion operator. Either
      method results in an <see cref="NaNullValueException"/> if the structure is <see langword="null"/>.
    </para>
    <para>
      NaInt64 can be used as a replacement for <see cref="System.Data.SqlTypes.SqlInt64"/> if you prefer the 
      null-value semantics of <see cref="NaInt64"/> or need serializability. Implicit conversion operators for 
      <see cref="SqlInt64 "/>allow <see cref="NaInt64"/> to be used seamlessly with ADO.NET.
    </para>
    <para>
      The following null-value semantics are used for <see cref="NaInt64"/> structures:
    </para>
    <list type="table">
      <listheader>
        <term>Category</term>
        <description>Semantics</description>
      </listheader>
      <item>
        <term>Equality</term>
        <description>
          The standard equality methods and operators of <see cref="NaInt64"/> consider two <see cref="Null"/> values 
          equal.
          <para>
            Applies to <see cref="Equals"/>, <see cref="NotEquals"/>, <see cref="operator =="/>, 
            <see cref="operator !="/>.
          </para>
        </description>
      </item>
      <item>
        <term>SQL-style Equality</term>
        <description>
          The SQL-style equality methods of <see cref="NaInt64"/> return <see cref="NaInt64.Null"/> if either of the 
          compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="EqualsSql"/>, <see cref="NotEqualsSql"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparison</term>
        <description>
          The standard compare methods and operators of <see cref="NaInt64"/> return <see cref="NaInt64.Null"/> if 
          either of the compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="LessThan"/>, <see cref="LessThanOrEqual"/>, <see cref="GreaterThan"/>,
            <see cref="GreaterThanOrEqual"/>, <see cref="operator &lt;"/>, <see cref="operator &lt;="/>, 
            <see cref="operator &gt;"/>, <see cref="operator &gt;="/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparision using <see cref="CompareTo"/></term>
        <description>
          The CompareTo methods of <see cref="NaInt64"/> consider <see cref="Null"/> and null references to be less
          than any other value.
          <para>
            Applies to <see cref="CompareTo"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Arithmetics</term>
        <description>
          The arithmetic methods and operators of <see cref="NaInt64"/> return <see cref="Null"/> if eihter of their 
          arguments are <see langword="null"/>. All arithmetic methods are checked, i.e. 
          <see cref="OverflowException"/> and <see cref="DivideByZeroException"/> may be thrown.
          <para>
            Applies to <see cref="Add"/>, <see cref="Subtract"/>, <see cref="Multiply"/>, <see cref="Divide"/>, 
            <see cref="Mod"/>, <see cref="operator +"/>, <see cref="operator -"/>, <see cref="operator *"/>, 
            <see cref="operator /"/>, <see cref="operator %"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Type Conversion</term>
        <description>
          If an <see cref="NaInt64"/> null-value is converted to an <see cref="Int32"/>, a 
          <see cref="NaNullValueException"/> is thrown. Conversions from <see cref="Int64"/> to <see cref="NaInt64"/>, 
          and conversions to and from <see cref="SqlInt64"/> never throw exceptions.
        </description>
      </item>
      <item>
        <term>Formatting and Parsing</term>
        <description>
          <para>
            If the instance is not <see langword="null"/>, <see cref="ToString"/> returns the same string that 
            <see cref="Int64.ToString"/> would return. If it is <see langword="null"/>, <see cref="ToString"/> returns 
            the value <see cref="NullString"/> ("null"). Prefix the format string with the tilde symbol ("~") to 
            return a zero-length string for <see langword="null"/>.
          </para>
          <para>
            <see cref="Parse"/> returns <see langword="null"/> if the string is a null reference, a zero-length string 
            or <see cref="NullString"/> ("null"). Otherwise, it returns the same value that 
            <see cref="Int64.Parse"/> would return.
          </para>
        </description>
      </item>
    </list>
  </remarks>
</NaInt64>

<NaSingle>
  <remarks>
    <para>
      <see cref="NaSingle"/> is basically a structure that can contain any single-precision floating point number or 
      <see langword="null"/>. Use <see cref="IsNull"/> to find out whether a specific structure contains 
      <see langword="null"/>, or <see cref="NaSingle.Null"/> to assign <see langword="null"/> to an 
      <see cref="NaSingle"/> variable.
    </para>
    <para>
      You can use the <see cref="Value"/> property to access the Single value, or the explicit <see cref="Single"/> 
      conversion operator. Either method results in an <see cref="NaNullValueException"/> if the structure is 
      <see langword="null"/>.
    </para>
    <para>
      NaSingle can be used as a replacement for <see cref="System.Data.SqlTypes.SqlSingle"/> if you prefer the 
      null-value semantics of <see cref="NaSingle"/> or need serializability. Implicit conversion operators for 
      <see cref="SqlSingle "/>allow <see cref="NaSingle"/> to be used seamlessly with ADO.NET.
    </para>
    <para>
      The following null-value semantics are used for <see cref="NaSingle"/> structures:
    </para>
    <list type="table">
      <listheader>
        <term>Category</term>
        <description>Semantics</description>
      </listheader>
      <item>
        <term>Equality</term>
        <description>
          The standard equality methods and operators of <see cref="NaSingle"/> consider two <see cref="Null"/> values 
          equal.
          <para>
            Applies to <see cref="Equals"/>, <see cref="NotEquals"/>, <see cref="operator =="/>, 
            <see cref="operator !="/>.
          </para>
        </description>
      </item>
      <item>
        <term>SQL-style Equality</term>
        <description>
          The SQL-style equality methods of <see cref="NaSingle"/> return <see cref="NaSingle.Null"/> if either of the 
          compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="EqualsSql"/>, <see cref="NotEqualsSql"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparison</term>
        <description>
          The standard compare methods and operators of <see cref="NaSingle"/> return <see cref="NaSingle.Null"/> 
          if either of the compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="LessThan"/>, <see cref="LessThanOrEqual"/>, <see cref="GreaterThan"/>, 
            <see cref="GreaterThanOrEqual"/>,
            <see cref="operator &lt;"/>, <see cref="operator &lt;="/>, <see cref="operator &gt;"/>, 
            <see cref="operator &gt;="/>.
          </para>
        </description>
      </item>
      <item>
        <term>Relative Comparision using <see cref="CompareTo"/></term>
        <description>
          The CompareTo methods of <see cref="NaSingle"/> consider <see cref="Null"/> and null references to be less 
          than any other value.
          <para>
            Applies to <see cref="CompareTo"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Arithmetics</term>
        <description>
          The arithmetic methods and operators of <see cref="NaSingle"/> return <see cref="Null"/> if either of 
          their arguments are <see langword="null"/>. All arithmetic methods are checked, i.e. 
          <see cref="OverflowException"/> and <see cref="DivideByZeroException"/> may be thrown.
          <para>
            Applies to <see cref="Add"/>, <see cref="Subtract"/>, <see cref="Multiply"/>, <see cref="Divide"/>, 
            <see cref="Mod"/>, <see cref="operator +"/>, <see cref="operator -"/>, <see cref="operator *"/>, 
            <see cref="operator /"/>, <see cref="operator %"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Type Conversion</term>
        <description>
          If an <see cref="NaSingle"/> null-value is converted to a <see cref="Single"/>, a 
          <see cref="NaNullValueException"/> is thrown. Conversions from <see cref="Single"/> to 
          <see cref="NaSingle"/>, and conversions to and from <see cref="SqlSingle"/> never throw exceptions.
        </description>
      </item>
      <item>
        <term>Formatting and Parsing</term>
        <description>
          <para>
            If the instance is not <see langword="null"/>, <see cref="ToString"/> returns the same string that 
            <see cref="Single.ToString"/> would return. If it is <see langword="null"/>, <see cref="ToString"/> 
            returns the value <see cref="NullString"/> ("null"). Prefix the format string with the tilde symbol ("~") 
            to return a zero-length string for <see langword="null"/>.
          </para>
          <para>
            <see cref="Parse"/> returns <see langword="null"/> if the string is a null reference, a zero-length 
            string or <see cref="NullString"/> ("null"). Otherwise, it returns the same value that 
            <see cref="Single.Parse"/> would return.
          </para>
        </description>
      </item>
    </list>
  </remarks>
</NaSingle>

<NaGuid>
  <remarks>
    <para>
      <see cref="NaGuid"/> is basically a structure that can contain any globally unique identifier (GUID) or 
      <see langword="null"/>. Use <see cref="IsNull"/> to find out whether a specific structure contains 
      <see langword="null"/>, or <see cref="NaGuid.Null"/> to assign <see langword="null"/> to an 
      <see cref="NaGuid"/> variable.
    </para>
    <para>
      You can use the <see cref="Value"/> property to access the Guid value, or the explicit <see cref="Guid"/> 
      conversion operator. Either method results in an <see cref="NaNullValueException"/> if the structure is 
      <see langword="null"/>.
    </para>
    <para>
      NaGuid can be used as a replacement for <see cref="System.Data.SqlTypes.SqlGuid"/> if you prefer the null-value 
      semantics of <see cref="NaGuid"/> or need serializability. Implicit conversion operators for 
      <see cref="SqlGuid "/>allow <see cref="NaGuid"/> to be used seamlessly with ADO.NET.
    </para>
    <para>
      The following null-value semantics are used for <see cref="NaGuid"/> structures:
    </para>
    <list type="table">
      <listheader>
        <term>Category</term>
        <description>Semantics</description>
      </listheader>
      <item>
        <term>Equality</term>
        <description>
          The standard equality methods and operators of <see cref="NaGuid"/> consider two <see cref="Null"/> values 
          equal.
          <para>
            Applies to <see cref="Equals"/>, <see cref="NotEquals"/>, <see cref="operator =="/>, 
            <see cref="operator !="/>.
          </para>
        </description>
      </item>
      <item>
        <term>SQL-style Equality</term>
        <description>
          The SQL-style equality methods of <see cref="NaGuid"/> return <see cref="NaGuid.Null"/> if either of the 
          compared values is <see cref="Null"/>. 
          <para>
            Applies to <see cref="EqualsSql"/>, <see cref="NotEqualsSql"/>.
          </para>
        </description>
      </item>
      <item>
        <term>Type Conversion</term>
        <description>
          If an <see cref="NaGuid"/> null-value is converted to a <see cref="Guid"/>, a 
          <see cref="NaNullValueException"/> is thrown. Conversions from <see cref="Guid"/> to <see cref="NaGuid"/>, 
          and conversions to and from <see cref="SqlGuid"/> never throw exceptions.
        </description>
      </item>
      <item>
        <term>Formatting</term>
        <description>
          <para>
            If the instance is not <see langword="null"/>, <see cref="ToString"/> returns the same string that 
            <see cref="Guid.ToString"/> would return. If it is <see langword="null"/>, <see cref="ToString"/> returns 
            the value <see cref="NullString"/> ("null"). Prefix the format string with the tilde symbol ("~") to 
            return a zero-length string for <see langword="null"/>.
          </para>
        </description>
      </item>
    </list>
  </remarks>
</NaGuid>

</Comments>