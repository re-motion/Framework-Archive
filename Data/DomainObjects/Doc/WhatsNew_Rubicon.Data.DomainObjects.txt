1.3.7.0
=======

- Neue static property: ClientTransaction.HasCurrent eingeführt.
- Neue Assembly Rubicon.Data.DomainObjects.Web: Enthält WxeTransactedFunction mit WxeTransaction.
  Die WxeTransactedFunction verwaltet eine aktuelle ClientTransaction. Damit muss dies nicht mehr in der Applikation
  über die Session gesteuert werden. Ausserdem werden jetzt mehrere parallele Browser-Fenster direkt unterstützt.
  Subfunktionen können entweder eine neue Transaktion beginnen oder die der übergeordneten WXE-Funktion weiterverwenden.
  

1.2.43.0
========

- Rubicon.Data.DomainObjects.ObjectBinding.Web:
  * Attribut 'TagPrefix' ("dow") vergeben, da ansonsten VS-Designer eine nichtssagende Default-Präfix verwendet.
  * DomainObjectDataSourceControl: Wenn beim Einlesen des Mappings eine Exception ausgelöst wird, 
    wird jetzt keine MessageBox mehr angezeigt, sondern die Fehlermeldung in den Inhalt des Controls gerendert.
    
- Rubicon.Data.DomainObjects:
  Wird ein Objekt A, das in der aktuellen Transaktion neu angelegt wurde, im Committing-Event eines anderen Objektes B
  gelöscht, wird jetzt für Objekt A kein Committing Event mehr ausgelöst.
  

1.2.35.0
========

- Rubicon.Data.DomainObjects.ObjectBinding:
  * Wenn die Klasse, die bei einem ItemType-Attribut einer Collection-Property angegeben ist, nicht im Mapping vorkommt, wird
    jetzt eine MappingException statt einer ArgumentNullException geworfen.
  * Für Collection-Properties, die nicht im Mapping beschrieben sind, wird keine MappingException mehr ausgelöst, wenn das
    ItemType-Attribut fehlt. Per Default wird BindableDomainObject als Item-Type der Collection angenommen.
  
  
1.2.34.0
========
  
- ClassDefinition:
  * Bugfix für Beziehung in "Composite" Design Pattern: 
    1. GetMyRelationEndPointDefinitions liefert jetzt nur mehr alle Endpunkte der eigenen Klasse.
    2. GetRelationDefinitions funktioniert jetzt bei "Composite" Design Pattern richtig => Es kommt keine Exception mehr.
    3. Durch Behebung von Punkt 1 und Punkt 2 erzeugt DOGen jetzt bei "Composite" Design Patterns den richtigen Output (C# und SQL).
  * GetOppositeEndPointDefinition liefert keine Exception mehr, wenn gegenüberliegender Endpunkt nicht gefunden wird.
  * Neue Methode IsMyRelationEndPoint, die angibt, ob ein übergebener Endpunkt zu dieser Klasse gehört.
  * Neue Methode GetMandatoryRelationDefinition, die Exception liefert, wenn Beziehung nicht gefunden wird.
  * Neue Methode GetMandatoryOppositeClassDefinition, die Exception liefert, wenn gegenüberliegende Klasse nicht gefunden wird.
  * Neue Methode GetMandatoryRelationEndPointDefinition, die Exception liefert, wenn Endpunkt nicht gefunden wird. 
  * Neue Methode GetMandatoryOppositeEndPointDefinition, die Exception liefert, wenn gegenüberliegender Endpunkt nicht gefunden wird.
  * Neue Methode GetMandatoryPropertyDefinition, die Exception liefert, wenn Eigenschaft nicht gefunden wird.

- DomainObjectDataSourceControl:
  * Wird eine BocList auf ein DomainObjectDataSourceControl gebunden und zur Design Time eine Property über das GUI ausgewählt, wird eine 
    "Value cannot be null, Parameter name: classDefinition"-Exception geworfen, wenn die Objektklasse Collection-Properties beinhaltet, die
    nicht im Mapping vorkommen und das Attribut "ItemType" nicht gesetzt haben. Hier kommt jetzt eine sprechende Meldung. 
    Hinweis: In einem späteren Build wird das "ItemType"-Attribut optional sein und als ItemType "BindableDomainObject" angenommen.
    
- DomainObject und ClientTransaction Committing Events:
  * Wurde im DomainObject.Committing oder im ClientTransaction.Committing Event ein neu erzeugtes Objekt wieder gelöscht, wurde eine
    ObjectDiscardedException ausgelöst => Behoben.
  * DomainObject, DataContainer, PropertyValueCollection und PropertyValue haben neue Eigenschaft IsDiscarded.  
  
  
1.2.33.0
========

- Bugfixes DOGen:
  * Es werden jetzt auch Enums (die nicht als nested Types deklariert sind) erstellt.
  * Wenn der Typ einer Property in einem anderen Namespace liegt, wird der Typ vollqualifiziert angegeben.
  * Ein "using Rubicon.Data.DomainObjects.ObjectBinding" ist jetzt im Fileheader eingefügt.

- DomainObjectDataSourceControl:
  * Wird mapping.xml zur Design Time ausgelesen und enthält sie einen Fehler, wurde die Exception durch Visual Studio verschkluckt => 
    Lösung: Fehler abfangen und eigene MessageBox anzeigen.

- BooleanProperty:
  * GetDisplayName zeigt jetzt zusätzlich zu den englischen Texten auch lokalisierte deutsche Texte (Ja/Nein) an. 
    Hierfür gibt es eine sprachspezifische Satellite Assembly Rubicon.Data.DomainObjects.ObjectBinding.resources.dll


1.2.26.0
========

- NullableProperty
  * Liefert bei IsRequired nicht mehr _isNullable sonder base.IsRequired
  
- ReflectionPropertyFactory
  * Liefert bei IsPropertyRequired falls sonst nichts angegeben bei ReferenceTypes default false.

1.2.25.0
========

- Unterstützung für unidirektionale Beziehungen in mapping.xml:
  Element "relationProperty" nur auf einer Beziehungsseite definieren und Child-Element "oppositeClass" angeben =>
  Rubicon.Data.DomainObjects verwendet automatisch unidirektionale Beziehung => 
  Bei Änderungen werden auf dem gegenüberliegenden Objekt/Collection keine Events ausgelöst und kein State-Tracking durchgeführt.


1.2.18.0
========

- Rubicon.Data.DomainObjects.ObjectBinding: Die Property "ID" eines BindableDomainObjects scheint wieder in der IntelliSense auf. BindableDomainObject
  versteckt die Basisimplementierung von ID nicht mehr mit "new".


1.2.16.0
========

- "GOLDEN VERSION" von Rubicon.Data.DomainObjects und Rubicon.Data.DomainObjects.ObjectBinding


1.2.15.0
========

- Neue Assembly DOGen.exe eingeführt.
  Diese Assembly ist eine Konsolenanwendung zum automatischen Generieren des C# Source Codes eines Domain Models und der SQL Skripts für den 
  Datenbankaufbau.


1.2.14.0
========

- Neue Assembly Rubicon.Data.DomainObjects.CodeGenerator eingeführt.
  Diese Assembly bietet Klassen zum automatischen Generieren des C# Source Codes eines Domain Models und der SQL Skripts für den Datenbankaufbau.


1.2.13.0
========

- Klasse PerformanceCounters wurde entfernt, da die darunterliegende Windows API von Windows Server 2003 und Windows XP zum aktuellen Zeitpunkt
  einen nicht behobenen Bug aufweist. Details siehe:
  http://groups.google.at/groups?hl=de&lr=&newwindow=1&threadm=7%24tO0xvQEHA.3664%40cpmsftngxa10.phx.gbl&rnum=2&prev=/groups%3Fq%3D%2522Win32Exception%2522%2B%2522The%2Bdevice%2Bis%2Bnot%2Bready%2522%26hl%3Dde%26lr%3D%26newwindow%3D1%26selm%3D7%2524tO0xvQEHA.3664%2540cpmsftngxa10.phx.gbl%26rnum%3D2


1.2.12.0
========

- ClientTransaction.Rollback: Bei einem Rollback wurde in einer 1:n Beziehung die DomainObjectCollection durch ein neues Objekt ersetzt. 
  Jetzt wird die gleiche Objektinstanz auf den originalen Inhalt gesetzt.
- ClientTransaction.Commit: Bei einem Commit wurde in einer 1:n Beziehung die DomainObjectCollection mit dem urspünglichen Status der Beziehung 
  durch ein neues Objekt ersetzt. Jetzt wird die gleiche Objektinstanz auf den neuen Inhalt gesetzt.


1.2.11.0
========

- ClientTransaction.Rollback: Wurde nach einem Rollback zu einer 1:n Beziehung ein neues Objekt hinzugefügt/entfernt, 
  wurde der Link auf der n-Seite nicht aktualisiert => Behoben.

- Basisklasse für alle Konfigurationsklassen (Mapping, StorageProviders, Queries) eingeführt. Neue Eigenschaft ApplicationName eingeführt.

- Neue Klasse PerformanceCounters mit Methoden zum Installieren und Deinstallieren der Performance Counter eingeführt.

<= 1.2.10.0
===========

- Beta-Versionen: Sind noch nicht für den Einsatz in einer Produktionsumgebung gedacht.